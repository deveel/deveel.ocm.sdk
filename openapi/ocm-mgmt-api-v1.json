{
  "openapi": "3.0.3",
  "info": {
    "title": "Deveel OCM API",
    "version": "v1",
    "description": "Specifications of the Deveel Omni-Channel Messaging API v1",
    "contact": {
      "name": "Antonello Provenzano",
      "email": "antonello@deveel.com"
    },
    "license": {
      "name": "Deveel EULA",
      "url": "https://docs.ocm.deveel.net/LICENSE.html"
    },
    "x-logo": {
      "url": "https://github.com/deveel/deveel.ocm.openapi-docs/raw/main/deveel-logo.png"
    }
  },
  "servers": [
    {
      "url": "https://api.ocm.deveel.net"
    }
  ],
  "paths": {
    "/client": {
      "post": {
        "tags": [
          "client"
        ],
        "summary": "Creates a Client",
        "operationId": "client_create",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ClientCreationRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientCreationRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientCreationRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ClientCreationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The client was successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Client"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Client"
                }
              }
            }
          },
          "400": {
            "description": "One or more of the data of the client are invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The given tenant was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "create:client"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "client"
        ],
        "summary": "Gets a Page of Clients",
        "operationId": "client_getPage",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A page of clients from the identity manager",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageResultOfClient"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageResultOfClient"
                }
              }
            }
          },
          "400": {
            "description": "One or more of parameters are invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read:client"
            ]
          }
        ]
      }
    },
    "/client/{id}": {
      "get": {
        "tags": [
          "client"
        ],
        "summary": "Gets a Client",
        "operationId": "client_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The client was found in the identity manager",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Client"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Client"
                }
              }
            }
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The client or the tenant were not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read:client"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "client"
        ],
        "summary": "Deletes a Client",
        "operationId": "client_delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The client was deleted successfully"
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The client was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "delete:client"
            ]
          }
        ]
      }
    },
    "/client/{id}/status": {
      "put": {
        "tags": [
          "client"
        ],
        "summary": "Sets the Status of a Client",
        "operationId": "client_setStatus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/NewClientStatus"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewClientStatus"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/NewClientStatus"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/NewClientStatus"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The status of the client was changed"
          },
          "304": {
            "description": "The status of the client was not chagened"
          },
          "400": {
            "description": "One or more of the request data are invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Either the tenant or the client were not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "update:client"
            ]
          }
        ]
      }
    },
    "/role": {
      "get": {
        "tags": [
          "role"
        ],
        "summary": "Get a All of Roles",
        "operationId": "role_getAll",
        "responses": {
          "200": {
            "description": "The list of the roles is returned",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Role"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Role"
                  }
                }
              }
            }
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read:role"
            ]
          }
        ]
      }
    },
    "/role/{id}": {
      "get": {
        "tags": [
          "role"
        ],
        "summary": "Get a Role",
        "operationId": "role_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The given role is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The role was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read:role"
            ]
          }
        ]
      }
    },
    "/role/{id}/grant": {
      "get": {
        "tags": [
          "role"
        ],
        "summary": "Get the Grants of a Role",
        "operationId": "role_getGrants",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The grant of the role is returned",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SubjectGrant"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SubjectGrant"
                  }
                }
              }
            }
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The role was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read:role"
            ]
          }
        ]
      }
    },
    "/user": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create a New User",
        "operationId": "user_create",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/NewUser"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewUser"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/NewUser"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/NewUser"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The user was successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "The request contains some invalid elements",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "If the user is associated to a Tenant and this was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Another user with the same e-mail or the same name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "create:user"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Gets a Page of Users",
        "operationId": "user_getPage",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A page of users for the tenant",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageResultOfUser"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageResultOfUser"
                }
              }
            }
          },
          "400": {
            "description": "One or more of the parameters of the request are invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read:user"
            ]
          }
        ]
      }
    },
    "/user/{id}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Gets a User",
        "operationId": "user_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The user was found in the identity manager",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The user was not found in the identity manager",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read:user"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Deletes a User",
        "operationId": "user_delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The user was successfully deleted"
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Either the tenant or the user were not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "delete:user"
            ]
          }
        ]
      }
    },
    "/user/me": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Gets the Current User",
        "operationId": "user_getMe",
        "responses": {
          "200": {
            "description": "The current user was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The user could not be found in the identity manager",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read:user"
            ]
          }
        ]
      }
    },
    "/user/{id}/status": {
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Sets the Status of a User",
        "operationId": "user_setStatus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/NewUserStatus"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewUserStatus"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/NewUserStatus"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/NewUserStatus"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The status of the user was changed"
          },
          "304": {
            "description": "The status of the user was not chagened"
          },
          "400": {
            "description": "One or more of the request data are invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Either the tenant or the user were not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "write:tenant",
              "update:user"
            ]
          }
        ]
      }
    },
    "/user/{id}/grant": {
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Grant Permissions to a User",
        "operationId": "user_grant",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantAction"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantAction"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantAction"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantAction"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The user was successfully assigned with permissions"
          },
          "304": {
            "description": "The user was not assigned with the given permissions"
          },
          "400": {
            "description": "The content of the request is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Either the tenant or the user were not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "grant:user"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get the Grants of a User",
        "operationId": "user_getGrants",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "At least one grant was found for the given user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SubjectGrant"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SubjectGrant"
                  }
                }
              }
            }
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Either the tenant or the user were not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read:user"
            ]
          }
        ]
      }
    },
    "/channel/request/{id}": {
      "get": {
        "tags": [
          "channel"
        ],
        "summary": "Gets a Channel Assignment Request",
        "operationId": "channel_getRequest",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was found and returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelAssignmentRequest"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelAssignmentRequest"
                }
              }
            }
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "No channel assignment request with the given identifier was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "request:channel"
            ]
          }
        ]
      }
    },
    "/channel/request": {
      "get": {
        "tags": [
          "channel"
        ],
        "summary": "Gets all Channel Assignment Requests",
        "operationId": "channel_getRequests",
        "responses": {
          "200": {
            "description": "The list of requests is returned",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChannelAssignmentRequest"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChannelAssignmentRequest"
                  }
                }
              }
            }
          },
          "400": {
            "description": "One or more of the parameters is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "request:channel"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "channel"
        ],
        "summary": "Requests the Assignment of a Channel",
        "operationId": "channel_request",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/NewChannelAssignmentRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewChannelAssignmentRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/NewChannelAssignmentRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/NewChannelAssignmentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "The request was successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelAssignmentRequest"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelAssignmentRequest"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request is wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The channel requested was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "A channel with the same name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "415": {
            "description": "The content type of the channel is not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "request:channel"
            ]
          }
        ]
      }
    },
    "/channel/schema": {
      "get": {
        "tags": [
          "channel"
        ],
        "summary": "Gets all the Channel Schemata",
        "operationId": "channel_getAllSchema",
        "parameters": [
          {
            "name": "provider",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All the supported channel schemata are returned",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChannelSchema"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChannelSchema"
                  }
                }
              }
            }
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read:inventory"
            ]
          }
        ]
      }
    },
    "/channel/schema/{type}/{provider}": {
      "get": {
        "tags": [
          "channel"
        ],
        "summary": "Get a Channel Schema",
        "operationId": "channel_getSchema",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ChannelType"
            }
          },
          {
            "name": "provider",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The schema for the channel of the given type and provider was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelSchema"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelSchema"
                }
              }
            }
          },
          "400": {
            "description": "The type or the provider of channel is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The schema for the given channel type and provider was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read:inventory"
            ]
          }
        ]
      }
    },
    "/channel/": {
      "post": {
        "tags": [
          "channel"
        ],
        "summary": "Creates a new Channel",
        "operationId": "channel_create",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/NewUserChannel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewUserChannel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/NewUserChannel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/NewUserChannel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The channel was successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserChannel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserChannel"
                }
              }
            }
          },
          "400": {
            "description": "Some of the contents of the channel were invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "405": {
            "description": "The provider does not allow some of the functions of the channel",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "406": {
            "description": "One or more of the terminals are not allowed by the channel",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "A channel with the same name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "415": {
            "description": "One of the content types of the channel is not supported by the provider",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "create:channel"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "channel"
        ],
        "summary": "Gets all Channels",
        "operationId": "channel_listAll",
        "parameters": [
          {
            "name": "includeNotActive",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of channels of the current user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserChannel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserChannel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read:channel"
            ]
          }
        ]
      }
    },
    "/channel/{channelId}": {
      "get": {
        "tags": [
          "channel"
        ],
        "summary": "Gets a Channel",
        "operationId": "channel_get",
        "parameters": [
          {
            "name": "channelId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The channel with the given ID is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserChannel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserChannel"
                }
              }
            }
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "No channel with the given ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read:channel"
            ]
          }
        ]
      }
    },
    "/channel/name/{channelName}": {
      "get": {
        "tags": [
          "channel"
        ],
        "summary": "Gets a Channel by Name",
        "operationId": "channel_getByName",
        "parameters": [
          {
            "name": "channelName",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "^[a-zA-Z0-9_.-]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The channel with the given name is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserChannel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserChannel"
                }
              }
            }
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "No channel with the given name was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read:channel"
            ]
          }
        ]
      }
    },
    "/channel/page": {
      "get": {
        "tags": [
          "channel"
        ],
        "summary": "Gets a page of Channels",
        "operationId": "channel_getPage",
        "parameters": [
          {
            "name": "number",
            "in": "query",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "maximum": 50,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "type",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The page of channels of the current user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageResultOfUserChannel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageResultOfUserChannel"
                }
              }
            }
          },
          "400": {
            "description": "One or more of the parameters is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read:channel"
            ]
          }
        ]
      }
    },
    "/channel/{channelId}/credentials": {
      "put": {
        "tags": [
          "channel"
        ],
        "summary": "Updates the Channel Credentials",
        "operationId": "channel_updateCredentials",
        "parameters": [
          {
            "name": "channelId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ChannelCredentials"
                }
              }
            },
            "application/json": {
              "schema": {
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ChannelCredentials"
                }
              }
            },
            "text/json": {
              "schema": {
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ChannelCredentials"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ChannelCredentials"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "The credentials were updated successfully"
          },
          "304": {
            "description": "The channel was not modified"
          },
          "400": {
            "description": "The request contained some invalid elements",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The channel was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "update:channel"
            ]
          }
        ]
      }
    },
    "/channel/{channelName}": {
      "head": {
        "tags": [
          "channel"
        ],
        "summary": "Checks if a Channel Exists",
        "operationId": "channel_exists",
        "parameters": [
          {
            "name": "channelName",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "^[a-zA-Z0-9_.-]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "A channel with the given name exists"
          },
          "400": {
            "description": "The name of the channel is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "None channel with the given name was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read:channel"
            ]
          }
        ]
      }
    },
    "/channel/inventory/{channelId}": {
      "get": {
        "tags": [
          "channel",
          "inventory"
        ],
        "summary": "Gets a Channel from the Inventory",
        "operationId": "channel_getInventoryItem",
        "parameters": [
          {
            "name": "channelId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The channel was found in the inventory",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Channel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Channel"
                }
              }
            }
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The channel was not found in the inventory",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read:inventory",
              "read:channel"
            ]
          }
        ]
      }
    },
    "/channel/inventory": {
      "get": {
        "tags": [
          "channel",
          "inventory"
        ],
        "summary": "Gets a Page of Channels from the Inventory",
        "operationId": "channel_getInventoryPage",
        "parameters": [
          {
            "name": "number",
            "in": "query",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "maximum": 50,
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The page of channels is returned from the inventory",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageResultOfChannel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageResultOfChannel"
                }
              }
            }
          },
          "400": {
            "description": "The paging parameters are not valid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read:inventory",
              "read:channel"
            ]
          }
        ]
      }
    },
    "/terminal/request": {
      "post": {
        "tags": [
          "terminal"
        ],
        "summary": "Requests a Terminal",
        "operationId": "terminal_request",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/NewTerminalAssignmentRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewTerminalAssignmentRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/NewTerminalAssignmentRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/NewTerminalAssignmentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "The request for the assignment of the terminal was accepted"
          },
          "400": {
            "description": "The request contains invalid elements",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The source terminal from the inventory was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "406": {
            "description": "The request for the assignment of the terminal is not accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "A terminal with the same address already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "request:terminal"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "terminal"
        ],
        "summary": "Gets a page of Terminal Assignment Requests",
        "operationId": "terminal_getRequests",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "type",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A page of terminal assignment requests is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageResultOfTerminalAssignmentRequest"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageResultOfTerminalAssignmentRequest"
                }
              }
            }
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read:terminal"
            ]
          }
        ]
      }
    },
    "/terminal/": {
      "post": {
        "tags": [
          "terminal"
        ],
        "summary": "Creates a Terminal",
        "operationId": "terminal_create",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/NewServerTerminal"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewServerTerminal"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/NewServerTerminal"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/NewServerTerminal"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The terminal was successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerTerminal"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerTerminal"
                }
              }
            }
          },
          "400": {
            "description": "The request contains invalid elements",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "A terminal with the same address already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "create:terminal"
            ]
          }
        ]
      }
    },
    "/terminal/{id}": {
      "get": {
        "tags": [
          "terminal"
        ],
        "summary": "Gets a Terminal",
        "operationId": "terminal_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The terminal was found and returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerTerminal"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerTerminal"
                }
              }
            }
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The terminal was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read:terminal"
            ]
          }
        ]
      }
    },
    "/terminal/page": {
      "get": {
        "tags": [
          "terminal"
        ],
        "summary": "Gets a page of Terminals",
        "operationId": "terminal_getPage",
        "parameters": [
          {
            "name": "number",
            "in": "query",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "maximum": 50,
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "type",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The terminals page was found and returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageResultOfServerTerminal"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageResultOfServerTerminal"
                }
              }
            }
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read:terminal"
            ]
          }
        ]
      }
    },
    "/terminal/lookup": {
      "post": {
        "tags": [
          "terminal"
        ],
        "summary": "Looks up a Terminal",
        "operationId": "terminal_lookup",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/TerminalLookup"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TerminalLookup"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TerminalLookup"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TerminalLookup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The terminal was found and returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerTerminal"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerTerminal"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The terminal was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read:terminal"
            ]
          }
        ]
      }
    },
    "/terminal/request/{id}": {
      "get": {
        "tags": [
          "terminal"
        ],
        "summary": "Gets a Terminal Assignment Request",
        "operationId": "terminal_getRequest",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The terminal assignment request with the given ID is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TerminalAssignmentRequest"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TerminalAssignmentRequest"
                }
              }
            }
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "No channel with the given ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read:terminal"
            ]
          }
        ]
      }
    },
    "/route/": {
      "post": {
        "tags": [
          "route"
        ],
        "summary": "Creates a new Route of Incoming Messages",
        "operationId": "route_create",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/NewMessageRoute"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewMessageRoute"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/NewMessageRoute"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/NewMessageRoute"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The route was created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageRoute"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageRoute"
                }
              }
            }
          },
          "400": {
            "description": "The request is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The channel was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "405": {
            "description": "The channel does not support inbound messaging",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "406": {
            "description": "The terminal associated to the route is not supported by the channel",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Another route matches the given receiving terminal",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "create:route"
            ]
          }
        ]
      }
    },
    "/route/{id}": {
      "get": {
        "tags": [
          "route"
        ],
        "summary": "Gets a Route of Incoming Messages",
        "operationId": "route_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The route with the given ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageRoute"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageRoute"
                }
              }
            }
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "No route was found with the given ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read:route"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "route"
        ],
        "summary": "Deletes a given Message Route",
        "operationId": "route_delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The route was successfully deleted"
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "None route was found with the given ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "delete:route"
            ]
          }
        ]
      }
    },
    "/route/{routeId}/status": {
      "put": {
        "tags": [
          "message",
          "route"
        ],
        "summary": "Updates the Status of a Message Route",
        "operationId": "route_setStatus",
        "parameters": [
          {
            "name": "routeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/MessageRouteStatusUpdate"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageRouteStatusUpdate"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageRouteStatusUpdate"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MessageRouteStatusUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated version of the route",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageRoute"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageRoute"
                }
              }
            }
          },
          "304": {
            "description": "The update request did not cause any changes"
          },
          "400": {
            "description": "The new status is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "None route was found with the given ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "update:route"
            ]
          }
        ]
      }
    },
    "/route/page": {
      "get": {
        "tags": [
          "route"
        ],
        "summary": "Gets a page of Message Routes",
        "operationId": "route_getPage",
        "parameters": [
          {
            "name": "number",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The page was successfully returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageResultOfMessageRoute"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageResultOfMessageRoute"
                }
              }
            }
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read:route"
            ]
          }
        ]
      }
    },
    "/webhook/subscription": {
      "post": {
        "tags": [
          "webhook"
        ],
        "summary": "Subscribes to Messages States",
        "operationId": "webhook_subscribe",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/NewWebhookSubscription"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewWebhookSubscription"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/NewWebhookSubscription"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/NewWebhookSubscription"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/NewWebhookSubscription"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/NewWebhookSubscription"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/NewWebhookSubscription"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The webhook subscription was created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookSubscription"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookSubscription"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookSubscription"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookSubscription"
                }
              }
            }
          },
          "400": {
            "description": "The contents of the request is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The channel was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "webhook"
        ],
        "summary": "Gets a page of Webhook Subscriptions",
        "operationId": "webhook_getSubscriptions",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "maximum": 50,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The page of subscriptions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageResultOfWebhookSubscription"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageResultOfWebhookSubscription"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PageResultOfWebhookSubscription"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PageResultOfWebhookSubscription"
                }
              }
            }
          },
          "400": {
            "description": "The page number or size are invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read:webhook_subscription"
            ]
          }
        ]
      }
    },
    "/webhook/subscription/{id}": {
      "get": {
        "tags": [
          "webhook"
        ],
        "summary": "Gets a Subscription to Webhooks",
        "operationId": "webhook_getSubscription",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The subscription was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookSubscription"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookSubscription"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookSubscription"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookSubscription"
                }
              }
            }
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The subscription was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read:webhook_subscription"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "webhook"
        ],
        "summary": "Unsubscribes from Webhooks",
        "operationId": "webhook_unsubscribe",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The subscription was deleted"
          },
          "304": {
            "description": "The subscription was not deleted"
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "None subscription with the given ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "unsubscribe:webhook"
            ]
          }
        ]
      }
    },
    "/webhook/subscription/{id}/status": {
      "put": {
        "tags": [
          "webhook"
        ],
        "summary": "Sets the Subscription Status",
        "operationId": "webhook_setStatus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookSubscriptionStatusUpdate"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookSubscriptionStatusUpdate"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookSubscriptionStatusUpdate"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookSubscriptionStatusUpdate"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/WebhookSubscriptionStatusUpdate"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/WebhookSubscriptionStatusUpdate"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/WebhookSubscriptionStatusUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The subscription was successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookSubscription"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookSubscription"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookSubscription"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookSubscription"
                }
              }
            }
          },
          "304": {
            "description": "The subscription was not updated"
          },
          "400": {
            "description": "The new state is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The subscription was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "update:webhook_subscription"
            ]
          }
        ]
      }
    }
  },
  "components": {
    "securitySchemes": {
      "oauth2": {
        "type": "oauth2",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://deveel.eu.auth0.com/oauth/token",
            "scopes": {
              "read:channel": "Read-only access to user Channels",
              "create:channel": "Create new user Channels",
              "update:channel": "Update settings of existing user Channels",
              "delete:channel": "Delete existing user Channels",
              "request:terminal": "Request the assignment of existing or new terminals",
              "delete:terminal": "Delete existing terminals",
              "read:terminal": "Read access to the terminals",
              "create:route": "Create new inbound message routes",
              "read:route": "Read access to message routes",
              "update:route": "Update existing message routes",
              "delete:route": "Delete existing message routes",
              "send:message": "Configure notifications of message state changes"
            }
          },
          "authorizationCode": {
            "authorizationUrl": "https://deveel.eu.auth0.com/authorize",
            "tokenUrl": "https://deveel.eu.auth0.com/oauth/token",
            "scopes": {
              "read:channel": "Read-only access to user Channels",
              "create:channel": "Create new user Channels",
              "update:channel": "Update settings of existing user Channels",
              "delete:channel": "Delete existing user Channels",
              "request:terminal": "Request the assignment of existing or new terminals",
              "delete:terminal": "Delete existing terminals",
              "read:terminal": "Read access to the terminals",
              "create:route": "Create new inbound message routes",
              "read:route": "Read access to message routes",
              "update:route": "Update existing message routes",
              "delete:route": "Delete existing message routes",
              "send:message": "Configure notifications of message state changes"
            }
          }
        }
      }
    },
    "schemas": {
      "BinaryFilter": {
        "required": [
          "field",
          "op"
        ],
        "type": "object",
        "properties": {
          "op": {
            "$ref": "#/components/schemas/WebFilterOperator"
          },
          "range": {
            "$ref": "#/components/schemas/Range"
          },
          "field": {
            "type": "string"
          },
          "string": {
            "type": "string",
            "nullable": true
          },
          "number": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "integer": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "boolean": {
            "type": "boolean",
            "nullable": true
          },
          "point": {
            "$ref": "#/components/schemas/GeoPoint"
          }
        }
      },
      "Client": {
        "required": [
          "active",
          "clientId",
          "clientSecret",
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "tenantId": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "string"
          },
          "clientId": {
            "type": "string"
          },
          "grantTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GrantType"
            },
            "nullable": true
          },
          "clientSecret": {
            "type": "string"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          },
          "consentType": {
            "type": "string",
            "nullable": true
          },
          "active": {
            "type": "boolean"
          }
        }
      },
      "ClientCreationRequest": {
        "required": [
          "client"
        ],
        "type": "object",
        "properties": {
          "client": {
            "$ref": "#/components/schemas/NewClient"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        }
      },
      "ContainsFilter": {
        "required": [
          "field",
          "value"
        ],
        "type": "object",
        "properties": {
          "field": {
            "type": "string"
          },
          "value": {
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "EndsWithFilter": {
        "required": [
          "field",
          "value"
        ],
        "type": "object",
        "properties": {
          "field": {
            "type": "string"
          },
          "value": {
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "EqualFilter": {
        "required": [
          "field"
        ],
        "type": "object",
        "properties": {
          "field": {
            "type": "string"
          },
          "string": {
            "type": "string",
            "nullable": true
          },
          "number": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "integer": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "boolean": {
            "type": "boolean",
            "nullable": true
          },
          "point": {
            "$ref": "#/components/schemas/GeoPoint"
          }
        }
      },
      "Filter": {
        "type": "object",
        "properties": {
          "logical": {
            "$ref": "#/components/schemas/LogicalFilter"
          },
          "and": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter"
            },
            "nullable": true
          },
          "or": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter"
            },
            "nullable": true
          },
          "binary": {
            "$ref": "#/components/schemas/BinaryFilter"
          },
          "eq": {
            "$ref": "#/components/schemas/EqualFilter"
          },
          "ne": {
            "$ref": "#/components/schemas/NotEqualFilter"
          },
          "gt": {
            "$ref": "#/components/schemas/GreaterThanFilter"
          },
          "gte": {
            "$ref": "#/components/schemas/GreaterThanOrEqualFilter"
          },
          "lt": {
            "$ref": "#/components/schemas/LesserThanFilter"
          },
          "lte": {
            "$ref": "#/components/schemas/LesserThanOrEqualFilter"
          },
          "startsWith": {
            "$ref": "#/components/schemas/StartsWithFilter"
          },
          "endsWith": {
            "$ref": "#/components/schemas/EndsWithFilter"
          },
          "contains": {
            "$ref": "#/components/schemas/ContainsFilter"
          },
          "between": {
            "$ref": "#/components/schemas/RangeFilter"
          },
          "not": {
            "$ref": "#/components/schemas/Filter"
          }
        }
      },
      "FilterValue": {
        "type": "object",
        "properties": {
          "string": {
            "type": "string",
            "nullable": true
          },
          "number": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "integer": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "boolean": {
            "type": "boolean",
            "nullable": true
          },
          "point": {
            "$ref": "#/components/schemas/GeoPoint"
          }
        }
      },
      "GeoPoint": {
        "required": [
          "lat",
          "lon"
        ],
        "type": "object",
        "properties": {
          "lon": {
            "type": "number",
            "format": "double"
          },
          "lat": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "GrantAction": {
        "required": [
          "actionType",
          "scopes"
        ],
        "type": "object",
        "properties": {
          "actionType": {
            "$ref": "#/components/schemas/GrantActionType"
          },
          "scopes": {
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "GrantActionType": {
        "enum": [
          "grant",
          "revoke"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "GrantActionType",
          "modelAsString": true
        }
      },
      "GrantType": {
        "enum": [
          "client_credentials",
          "authorization_code",
          "apiKey"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "GrantType",
          "modelAsString": true
        }
      },
      "GreaterThanFilter": {
        "required": [
          "field"
        ],
        "type": "object",
        "properties": {
          "field": {
            "type": "string"
          },
          "string": {
            "type": "string",
            "nullable": true
          },
          "number": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "integer": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "boolean": {
            "type": "boolean",
            "nullable": true
          },
          "point": {
            "$ref": "#/components/schemas/GeoPoint"
          }
        }
      },
      "GreaterThanOrEqualFilter": {
        "required": [
          "field"
        ],
        "type": "object",
        "properties": {
          "field": {
            "type": "string"
          },
          "string": {
            "type": "string",
            "nullable": true
          },
          "number": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "integer": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "boolean": {
            "type": "boolean",
            "nullable": true
          },
          "point": {
            "$ref": "#/components/schemas/GeoPoint"
          }
        }
      },
      "LesserThanFilter": {
        "required": [
          "field"
        ],
        "type": "object",
        "properties": {
          "field": {
            "type": "string"
          },
          "string": {
            "type": "string",
            "nullable": true
          },
          "number": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "integer": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "boolean": {
            "type": "boolean",
            "nullable": true
          },
          "point": {
            "$ref": "#/components/schemas/GeoPoint"
          }
        }
      },
      "LesserThanOrEqualFilter": {
        "required": [
          "field"
        ],
        "type": "object",
        "properties": {
          "field": {
            "type": "string"
          },
          "string": {
            "type": "string",
            "nullable": true
          },
          "number": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "integer": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "boolean": {
            "type": "boolean",
            "nullable": true
          },
          "point": {
            "$ref": "#/components/schemas/GeoPoint"
          }
        }
      },
      "LogicalFilter": {
        "required": [
          "filters",
          "op"
        ],
        "type": "object",
        "properties": {
          "op": {
            "$ref": "#/components/schemas/LogicalOperator"
          },
          "filters": {
            "minItems": 2,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter4"
            }
          }
        }
      },
      "LogicalOperator": {
        "enum": [
          "and",
          "or"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "LogicalOperator",
          "modelAsString": true
        }
      },
      "NewClient": {
        "required": [
          "grantTypes",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "grantTypes": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GrantType"
            }
          },
          "properties": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          },
          "consentType": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "NewClientStatus": {
        "required": [
          "active"
        ],
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "notes": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "NewUser": {
        "required": [
          "email"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "A unique name of the user (optional)",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "description": "The first name of the person (optional)",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "The family name of the person (optional)",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "The e-mail address that identifies the user and that is used\r\nfor communications",
            "format": "email"
          },
          "phone": {
            "type": "string",
            "description": "A phone number used to reach the user",
            "format": "tel",
            "nullable": true
          },
          "picture": {
            "type": "string",
            "description": "The link to a profile picture of the user",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {},
            "description": "Additional metadata of the user",
            "nullable": true
          },
          "active": {
            "type": "boolean",
            "description": "Whether to set the user active since its creation"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An optional list of roles to be assigned to the user",
            "nullable": true
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An optional list of scopes to be assigned to the user",
            "nullable": true
          },
          "password": {
            "type": "string",
            "description": "A password used to authenticate the user (if not provided, it is auto-generated)",
            "nullable": true
          }
        },
        "description": "The request of creation of a new user of the platform"
      },
      "NewUserStatus": {
        "required": [
          "active"
        ],
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "notes": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "NotEqualFilter": {
        "required": [
          "field"
        ],
        "type": "object",
        "properties": {
          "field": {
            "type": "string"
          },
          "string": {
            "type": "string",
            "nullable": true
          },
          "number": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "integer": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "boolean": {
            "type": "boolean",
            "nullable": true
          },
          "point": {
            "$ref": "#/components/schemas/GeoPoint"
          }
        }
      },
      "PageRequest": {
        "required": [
          "page",
          "size"
        ],
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PageSort"
            },
            "nullable": true
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter"
            },
            "nullable": true
          }
        }
      },
      "PageResultOfClient": {
        "required": [
          "request",
          "totalItems",
          "totalPages"
        ],
        "type": "object",
        "properties": {
          "request": {
            "$ref": "#/components/schemas/PageRequest"
          },
          "totalItems": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Client"
            },
            "nullable": true
          },
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "self": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "first": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "next": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "previous": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "last": {
            "type": "string",
            "format": "uri",
            "nullable": true
          }
        }
      },
      "PageResultOfUser": {
        "required": [
          "request",
          "totalItems",
          "totalPages"
        ],
        "type": "object",
        "properties": {
          "request": {
            "$ref": "#/components/schemas/PageRequest"
          },
          "totalItems": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            },
            "nullable": true
          },
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "self": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "first": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "next": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "previous": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "last": {
            "type": "string",
            "format": "uri",
            "nullable": true
          }
        }
      },
      "PageSort": {
        "required": [
          "field"
        ],
        "type": "object",
        "properties": {
          "field": {
            "type": "string"
          },
          "direction": {
            "$ref": "#/components/schemas/PageSortDirection"
          },
          "ascending": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "PageSortDirection": {
        "enum": [
          "default",
          "asc",
          "desc"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "PageSortDirection",
          "modelAsString": true
        }
      },
      "Permission": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "resource": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": {}
      },
      "Range": {
        "type": "object",
        "properties": {
          "lower": {
            "$ref": "#/components/schemas/FilterValue"
          },
          "upper": {
            "$ref": "#/components/schemas/FilterValue"
          }
        }
      },
      "RangeFilter": {
        "required": [
          "field"
        ],
        "type": "object",
        "properties": {
          "field": {
            "type": "string"
          },
          "lower": {
            "$ref": "#/components/schemas/FilterValue"
          },
          "upper": {
            "$ref": "#/components/schemas/FilterValue"
          }
        }
      },
      "Role": {
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "string"
          }
        }
      },
      "StartsWithFilter": {
        "required": [
          "field",
          "value"
        ],
        "type": "object",
        "properties": {
          "field": {
            "type": "string"
          },
          "value": {
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "SubjectGrant": {
        "type": "object",
        "properties": {
          "grantedBy": {
            "type": "string",
            "nullable": true
          },
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Permission"
            },
            "nullable": true
          },
          "grantedAt": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "User": {
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "tenantId": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "format": "email",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "format": "tel",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          },
          "active": {
            "type": "boolean"
          },
          "id": {
            "type": "string"
          },
          "identities": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserIdentity"
            },
            "nullable": true
          },
          "picture": {
            "type": "string",
            "nullable": true
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserRole"
            },
            "nullable": true
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        }
      },
      "UserIdentity": {
        "required": [
          "identityType",
          "provider",
          "userId"
        ],
        "type": "object",
        "properties": {
          "provider": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "namespace": {
            "type": "string",
            "nullable": true
          },
          "identityType": {
            "$ref": "#/components/schemas/UserIdentityType"
          }
        }
      },
      "UserIdentityType": {
        "enum": [
          "unknown",
          "managed",
          "social"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "UserIdentityType",
          "modelAsString": true
        }
      },
      "UserRole": {
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "ValidationProblemDetails": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": {}
      },
      "WebFilterOperator": {
        "enum": [
          "eq",
          "ne",
          "gt",
          "gte",
          "lt",
          "lte",
          "between",
          "contains",
          "startsWith",
          "endsWith"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "WebFilterOperator",
          "modelAsString": true
        }
      },
      "ApiKeyCredentials": {
        "required": [
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "minLength": 3,
            "type": "string",
            "description": "The value of the key"
          }
        },
        "description": "The specification of an API Key used to secure a channel"
      },
      "BasicAuthCredentials": {
        "required": [
          "password",
          "userName"
        ],
        "type": "object",
        "properties": {
          "userName": {
            "minLength": 3,
            "type": "string",
            "description": "The name of the user of the credentials"
          },
          "password": {
            "minLength": 3,
            "type": "string",
            "description": "The secret password of the credentials"
          }
        },
        "description": "The specification of a Basic authentication used to\r\nsecure the connection of a channel"
      },
      "BinaryFilter1": {
        "required": [
          "field",
          "op"
        ],
        "type": "object",
        "properties": {
          "op": {
            "$ref": "#/components/schemas/WebFilterOperator"
          },
          "range": {
            "$ref": "#/components/schemas/Range"
          },
          "field": {
            "minLength": 1,
            "type": "string"
          },
          "string": {
            "type": "string",
            "nullable": true
          },
          "number": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "integer": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "boolean": {
            "type": "boolean",
            "nullable": true
          },
          "point": {
            "$ref": "#/components/schemas/GeoPoint"
          }
        }
      },
      "Channel": {
        "required": [
          "contentTypes",
          "directions",
          "id",
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ChannelType"
          },
          "directions": {
            "$ref": "#/components/schemas/ChannelDirections"
          },
          "contentTypes": {
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "terminals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChannelTerminal"
            },
            "nullable": true
          },
          "id": {
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "ChannelAssignment": {
        "required": [
          "channelId"
        ],
        "type": "object",
        "properties": {
          "channelId": {
            "minLength": 1,
            "type": "string",
            "description": "The unique identifier of the instance of the channel\r\nassigned to the tenant"
          },
          "tenantId": {
            "type": "string",
            "description": "The unique identifier of the tenant assigned with the channel",
            "nullable": true
          },
          "timeStamp": {
            "type": "string",
            "description": "The exact time of the assignment",
            "format": "date-time"
          }
        },
        "description": "The explicit assignment of a channel to a tenant"
      },
      "ChannelAssignmentRequest": {
        "required": [
          "channel",
          "id",
          "requester",
          "timeStamp"
        ],
        "type": "object",
        "properties": {
          "channel": {
            "$ref": "#/components/schemas/RequestedChannel"
          },
          "response": {
            "$ref": "#/components/schemas/ChannelAssignmentResponse"
          },
          "requester": {
            "minLength": 1,
            "type": "string",
            "description": "The identifier of the user that made the request"
          },
          "timeStamp": {
            "type": "string",
            "description": "The exact time-stamp of the request",
            "format": "date-time"
          },
          "id": {
            "minLength": 1,
            "type": "string",
            "description": "The unique identifier of the request"
          },
          "assignment": {
            "$ref": "#/components/schemas/ChannelAssignment"
          }
        },
        "description": "The request of assignment of a channel from the inventory"
      },
      "ChannelAssignmentResponse": {
        "required": [
          "responder",
          "responseType",
          "timeStamp"
        ],
        "type": "object",
        "properties": {
          "responder": {
            "minLength": 1,
            "type": "string",
            "description": "The unique identifier of the user responding"
          },
          "responseType": {
            "$ref": "#/components/schemas/ResourceAssignmentResponseType"
          },
          "timeStamp": {
            "type": "string",
            "description": "The exact time-stamp of the response",
            "format": "date-time"
          },
          "notes": {
            "type": "string",
            "description": "An optional set of notes that inform on the\r\nmotivation and reasons of the response",
            "nullable": true
          }
        },
        "description": "The response to the request of assignment of a channel"
      },
      "ChannelCredentialType": {
        "enum": [
          "unknown",
          "apiKey",
          "basicAuth",
          "oAuth"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "ChannelCredentialType",
          "modelAsString": true
        }
      },
      "ChannelCredentials": {
        "type": "object",
        "properties": {
          "apiKey": {
            "$ref": "#/components/schemas/ApiKeyCredentials"
          },
          "basic": {
            "$ref": "#/components/schemas/BasicAuthCredentials"
          },
          "oAuth": {
            "$ref": "#/components/schemas/OAuthCredentials"
          }
        },
        "description": "Specifies secure credentials for the authentication\r\nof channels towards providers"
      },
      "ChannelDirections": {
        "enum": [
          "default",
          "out",
          "in",
          "duplex"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "ChannelDirections",
          "modelAsString": true
        }
      },
      "ChannelProvider": {
        "enum": [
          "other",
          "twilio",
          "sendgrid",
          "sendinblue",
          "facebook",
          "deveel",
          "linkmobility",
          "mailjet",
          "telegram"
        ],
        "type": "string",
        "description": "The enumeration of the available providers",
        "x-ms-enum": {
          "name": "ChannelProvider",
          "modelAsString": true
        }
      },
      "ChannelQuota": {
        "required": [
          "limit",
          "metricType"
        ],
        "type": "object",
        "properties": {
          "metricType": {
            "minLength": 1,
            "type": "string",
            "description": "The type of metric provisioned (eg. \"messages.outbound\", \"messages.fallbacks\")"
          },
          "period": {
            "$ref": "#/components/schemas/ChannelQuotaPeriod"
          },
          "limit": {
            "type": "integer",
            "description": "The provisioned upper limit of the quota",
            "format": "int64"
          }
        },
        "description": "A provisioned usage quota of a channel capability"
      },
      "ChannelQuotaPeriod": {
        "enum": [
          "none",
          "day",
          "month",
          "year"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "ChannelQuotaPeriod",
          "modelAsString": true
        }
      },
      "ChannelSchema": {
        "required": [
          "contentTypes",
          "credentialTypes",
          "directions",
          "provider",
          "receiverTypes",
          "senderTypes",
          "type"
        ],
        "type": "object",
        "properties": {
          "provider": {
            "$ref": "#/components/schemas/ChannelProvider"
          },
          "type": {
            "$ref": "#/components/schemas/ChannelType"
          },
          "directions": {
            "$ref": "#/components/schemas/ChannelDirections"
          },
          "credentialTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChannelCredentialType"
            },
            "description": "The type of credentials required by the channel"
          },
          "receiverTypes": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TerminalType"
            },
            "description": "The types of receiving terminals supported by the channel"
          },
          "senderTypes": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TerminalType"
            },
            "description": "The types of sender terminals supported by the channel"
          },
          "contentTypes": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageContentType"
            },
            "description": "The types of message content supported by the channel"
          },
          "settings": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The additional settings supported by the channel",
            "nullable": true
          }
        },
        "description": "The schema of a channel type and provider"
      },
      "ChannelSource": {
        "enum": [
          "unknown",
          "inventory",
          "customer"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "ChannelSource",
          "modelAsString": true
        }
      },
      "ChannelStatus": {
        "enum": [
          "none",
          "requested",
          "active",
          "suspended",
          "denied"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "ChannelStatus",
          "modelAsString": true
        }
      },
      "ChannelTerminal": {
        "required": [
          "address",
          "id",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "minLength": 1,
            "type": "string",
            "description": "The unique identifier of the terminal instance"
          },
          "type": {
            "$ref": "#/components/schemas/TerminalType"
          },
          "address": {
            "minLength": 1,
            "type": "string",
            "description": "The address of the terminal"
          }
        },
        "description": "A server terminal that is bound to a specific\r\nchannel instance"
      },
      "ChannelType": {
        "enum": [
          "sms",
          "messenger",
          "whatsapp",
          "email",
          "viber",
          "rcs",
          "push",
          "telegram",
          "sandbox"
        ],
        "type": "string",
        "description": "The enumeration of the types of channels supported\r\nby the platform",
        "x-ms-enum": {
          "name": "ChannelType",
          "modelAsString": true
        }
      },
      "ContainsFilter1": {
        "required": [
          "field",
          "value"
        ],
        "type": "object",
        "properties": {
          "field": {
            "minLength": 1,
            "type": "string"
          },
          "value": {
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "EndsWithFilter1": {
        "required": [
          "field",
          "value"
        ],
        "type": "object",
        "properties": {
          "field": {
            "minLength": 1,
            "type": "string"
          },
          "value": {
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "EqualFilter1": {
        "required": [
          "field"
        ],
        "type": "object",
        "properties": {
          "field": {
            "minLength": 1,
            "type": "string"
          },
          "string": {
            "type": "string",
            "nullable": true
          },
          "number": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "integer": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "boolean": {
            "type": "boolean",
            "nullable": true
          },
          "point": {
            "$ref": "#/components/schemas/GeoPoint"
          }
        }
      },
      "Filter1": {
        "type": "object",
        "properties": {
          "logical": {
            "$ref": "#/components/schemas/LogicalFilter"
          },
          "and": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter1"
            },
            "nullable": true
          },
          "or": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter1"
            },
            "nullable": true
          },
          "binary": {
            "$ref": "#/components/schemas/BinaryFilter1"
          },
          "eq": {
            "$ref": "#/components/schemas/EqualFilter1"
          },
          "ne": {
            "$ref": "#/components/schemas/NotEqualFilter1"
          },
          "gt": {
            "$ref": "#/components/schemas/GreaterThanFilter1"
          },
          "gte": {
            "$ref": "#/components/schemas/GreaterThanOrEqualFilter1"
          },
          "lt": {
            "$ref": "#/components/schemas/LesserThanFilter1"
          },
          "lte": {
            "$ref": "#/components/schemas/LesserThanOrEqualFilter1"
          },
          "startsWith": {
            "$ref": "#/components/schemas/StartsWithFilter1"
          },
          "endsWith": {
            "$ref": "#/components/schemas/EndsWithFilter1"
          },
          "contains": {
            "$ref": "#/components/schemas/ContainsFilter1"
          },
          "between": {
            "$ref": "#/components/schemas/RangeFilter1"
          },
          "not": {
            "$ref": "#/components/schemas/Filter1"
          }
        }
      },
      "GreaterThanFilter1": {
        "required": [
          "field"
        ],
        "type": "object",
        "properties": {
          "field": {
            "minLength": 1,
            "type": "string"
          },
          "string": {
            "type": "string",
            "nullable": true
          },
          "number": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "integer": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "boolean": {
            "type": "boolean",
            "nullable": true
          },
          "point": {
            "$ref": "#/components/schemas/GeoPoint"
          }
        }
      },
      "GreaterThanOrEqualFilter1": {
        "required": [
          "field"
        ],
        "type": "object",
        "properties": {
          "field": {
            "minLength": 1,
            "type": "string"
          },
          "string": {
            "type": "string",
            "nullable": true
          },
          "number": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "integer": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "boolean": {
            "type": "boolean",
            "nullable": true
          },
          "point": {
            "$ref": "#/components/schemas/GeoPoint"
          }
        }
      },
      "LesserThanFilter1": {
        "required": [
          "field"
        ],
        "type": "object",
        "properties": {
          "field": {
            "minLength": 1,
            "type": "string"
          },
          "string": {
            "type": "string",
            "nullable": true
          },
          "number": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "integer": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "boolean": {
            "type": "boolean",
            "nullable": true
          },
          "point": {
            "$ref": "#/components/schemas/GeoPoint"
          }
        }
      },
      "LesserThanOrEqualFilter1": {
        "required": [
          "field"
        ],
        "type": "object",
        "properties": {
          "field": {
            "minLength": 1,
            "type": "string"
          },
          "string": {
            "type": "string",
            "nullable": true
          },
          "number": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "integer": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "boolean": {
            "type": "boolean",
            "nullable": true
          },
          "point": {
            "$ref": "#/components/schemas/GeoPoint"
          }
        }
      },
      "MessageContentType": {
        "enum": [
          "text",
          "html",
          "multipart",
          "card",
          "template",
          "media"
        ],
        "type": "string",
        "description": "Enumerates the possible types of contents in a message",
        "x-ms-enum": {
          "name": "MessageContentType",
          "modelAsString": true
        }
      },
      "NewChannelAssignmentRequest": {
        "required": [
          "channelId",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9_.-]+$",
            "type": "string",
            "description": "The name of the channel instance"
          },
          "directions": {
            "$ref": "#/components/schemas/ChannelDirections"
          },
          "contentTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageContentType"
            },
            "description": "The types of content allowed by the channel (if not set\r\nthe channel will be assigned all the allowed content types\r\nfrom the source channel)",
            "nullable": true
          },
          "settings": {
            "type": "object",
            "additionalProperties": {},
            "description": "The settings specific for the channel instance, integrating\r\nor overriding the settings from the source channel",
            "nullable": true
          },
          "terminals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewChannelTerminal"
            },
            "description": "The list of terminals to be bound to the channel",
            "nullable": true
          },
          "channelId": {
            "minLength": 1,
            "type": "string",
            "description": "The identifier of the source channel from the inventory"
          },
          "quotas": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChannelQuota"
            },
            "description": "The usage quotas assigned to the channel",
            "nullable": true
          },
          "context": {
            "type": "object",
            "additionalProperties": {},
            "description": "A context that is appended to the messages sent or received\r\nthrough the channel",
            "nullable": true
          }
        },
        "description": "A new assignment request of a channel from the inventory"
      },
      "NewChannelTerminal": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the terminal (if not\r\nprovided, the terminal type and address will be used for the\r\nresolution)",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/TerminalType"
          },
          "address": {
            "type": "string",
            "description": "The address of the terminal to assign (if not provided,\r\nthe terminal identifier will be used for the resolution)",
            "nullable": true
          }
        },
        "description": "The request to associate a terminal to the channel"
      },
      "NewUserChannel": {
        "required": [
          "directions",
          "name",
          "provider",
          "type"
        ],
        "type": "object",
        "properties": {
          "quotas": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChannelQuota"
            },
            "description": "The usage quotas to be enforced within the channel",
            "nullable": true
          },
          "context": {
            "type": "object",
            "additionalProperties": {},
            "description": "A context that is appended to the messages sent or received\r\nthrough the channel.",
            "nullable": true
          },
          "name": {
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9_.-]+$",
            "type": "string",
            "description": "The name of the channel instance"
          },
          "type": {
            "$ref": "#/components/schemas/ChannelType"
          },
          "provider": {
            "$ref": "#/components/schemas/ChannelProvider"
          },
          "directions": {
            "$ref": "#/components/schemas/ChannelDirections"
          },
          "contentTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageContentType"
            },
            "description": "The list of allowed types of message content",
            "nullable": true
          },
          "credentials": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChannelCredentials"
            },
            "description": "The credentials that will be used to access the\r\nprovider of messaging services",
            "nullable": true
          },
          "settings": {
            "type": "object",
            "additionalProperties": {},
            "description": "Channel-specific settings (supported by the provider)",
            "nullable": true
          },
          "terminals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewChannelTerminal"
            },
            "description": "A list of terminals to be bound to the channel",
            "nullable": true
          }
        },
        "description": ""
      },
      "NotEqualFilter1": {
        "required": [
          "field"
        ],
        "type": "object",
        "properties": {
          "field": {
            "minLength": 1,
            "type": "string"
          },
          "string": {
            "type": "string",
            "nullable": true
          },
          "number": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "integer": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "boolean": {
            "type": "boolean",
            "nullable": true
          },
          "point": {
            "$ref": "#/components/schemas/GeoPoint"
          }
        }
      },
      "OAuthCredentials": {
        "required": [
          "clientId",
          "clientSecret"
        ],
        "type": "object",
        "properties": {
          "clientId": {
            "minLength": 1,
            "type": "string"
          },
          "clientSecret": {
            "minLength": 1,
            "type": "string"
          },
          "audience": {
            "type": "string",
            "nullable": true
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        }
      },
      "PageRequest1": {
        "required": [
          "page",
          "size"
        ],
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PageSort1"
            },
            "nullable": true
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter1"
            },
            "nullable": true
          }
        }
      },
      "PageResultOfChannel": {
        "required": [
          "request",
          "totalItems",
          "totalPages"
        ],
        "type": "object",
        "properties": {
          "request": {
            "$ref": "#/components/schemas/PageRequest1"
          },
          "totalItems": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Channel"
            },
            "nullable": true
          },
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "self": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "first": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "next": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "previous": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "last": {
            "type": "string",
            "format": "uri",
            "nullable": true
          }
        }
      },
      "PageResultOfUserChannel": {
        "required": [
          "request",
          "totalItems",
          "totalPages"
        ],
        "type": "object",
        "properties": {
          "request": {
            "$ref": "#/components/schemas/PageRequest1"
          },
          "totalItems": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserChannel"
            },
            "nullable": true
          },
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "self": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "first": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "next": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "previous": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "last": {
            "type": "string",
            "format": "uri",
            "nullable": true
          }
        }
      },
      "PageSort1": {
        "required": [
          "field"
        ],
        "type": "object",
        "properties": {
          "field": {
            "minLength": 1,
            "type": "string"
          },
          "direction": {
            "$ref": "#/components/schemas/PageSortDirection"
          },
          "ascending": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "RangeFilter1": {
        "required": [
          "field"
        ],
        "type": "object",
        "properties": {
          "field": {
            "minLength": 1,
            "type": "string"
          },
          "lower": {
            "$ref": "#/components/schemas/FilterValue"
          },
          "upper": {
            "$ref": "#/components/schemas/FilterValue"
          }
        }
      },
      "RequestedChannel": {
        "required": [
          "contentTypes",
          "directions",
          "name",
          "sourceId"
        ],
        "type": "object",
        "properties": {
          "sourceId": {
            "minLength": 1,
            "type": "string",
            "description": "The identifier of the source channel from the inventory"
          },
          "quotas": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChannelQuota"
            },
            "description": "A set of usage quotas requested for assignment",
            "nullable": true
          },
          "context": {
            "type": "object",
            "additionalProperties": {},
            "description": "A context that is appended to the messages sent or received\r\nthrough the channel.",
            "nullable": true
          },
          "name": {
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9_.-]+$",
            "type": "string",
            "description": "The custom name of the channel"
          },
          "type": {
            "$ref": "#/components/schemas/ChannelType"
          },
          "directions": {
            "$ref": "#/components/schemas/ChannelDirections"
          },
          "contentTypes": {
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The type of message contents to be allowed by the channel"
          },
          "settings": {
            "type": "object",
            "additionalProperties": {},
            "description": "Additional custom settings to be configured",
            "nullable": true
          },
          "terminals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChannelTerminal"
            },
            "description": "An optional set of terminals to be initially associated to the channel\r\n(further ones can be added later, if the channel will be assigned).",
            "nullable": true
          }
        },
        "description": "A configured channel that was requested for assignment"
      },
      "ResourceAssignmentResponseType": {
        "enum": [
          "none",
          "accepted",
          "rejected"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "ResourceAssignmentResponseType",
          "modelAsString": true
        }
      },
      "StartsWithFilter1": {
        "required": [
          "field",
          "value"
        ],
        "type": "object",
        "properties": {
          "field": {
            "minLength": 1,
            "type": "string"
          },
          "value": {
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "TerminalType": {
        "enum": [
          "phoneNumber",
          "email",
          "alphaNumeric",
          "conversation",
          "postalAddress",
          "user",
          "app",
          "url"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "TerminalType",
          "modelAsString": true
        }
      },
      "UserChannel": {
        "required": [
          "contentTypes",
          "name",
          "provider",
          "status",
          "type"
        ],
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/ChannelStatus"
          },
          "lastChanged": {
            "type": "string",
            "description": "The exact time-stamp of the last change to the\r\nsettings and states of the channel",
            "format": "date-time",
            "nullable": true
          },
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "The name of the channel instance"
          },
          "tenantId": {
            "type": "string",
            "description": "The identifier of the tenant of the cannel",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/ChannelType"
          },
          "provider": {
            "minLength": 1,
            "type": "string",
            "description": "The provider of messaging services used by\r\nthe channel instance"
          },
          "directions": {
            "$ref": "#/components/schemas/ChannelDirections"
          },
          "source": {
            "$ref": "#/components/schemas/ChannelSource"
          },
          "sourceId": {
            "type": "string",
            "description": "If the channel is originated from the inventory, this\r\nis the identifier of the original channel",
            "nullable": true
          },
          "settings": {
            "type": "object",
            "additionalProperties": {},
            "description": "A collection of settings of the channel instance (Note: the\r\ntypes of settings depend on the type of channel)",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "The unique identifier of the channel instance",
            "nullable": true
          },
          "contentTypes": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageContentType"
            },
            "description": "A list of message content types that are supported\r\nby the channel (either because of configuration or because\r\nof native capabilities of the channel)"
          },
          "quotas": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChannelQuota"
            },
            "description": "A list of provisioned messaging quotas (limits)\r\nto the usage of the channel instance",
            "nullable": true
          },
          "terminals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChannelTerminal"
            },
            "description": "A list of server terminals associated with the channel, that\r\ncan send or receive messages (accordingly to their assigned role)",
            "nullable": true
          },
          "context": {
            "type": "object",
            "additionalProperties": {},
            "description": "A context that is appended to the messages sent or received\r\nthrough the channel.",
            "nullable": true
          }
        },
        "description": "The instance of a channel owned by a customer"
      },
      "BinaryFilter2": {
        "required": [
          "field",
          "op"
        ],
        "type": "object",
        "properties": {
          "op": {
            "$ref": "#/components/schemas/WebFilterOperator"
          },
          "range": {
            "$ref": "#/components/schemas/Range"
          },
          "field": {
            "minLength": 1,
            "type": "string"
          },
          "string": {
            "type": "string",
            "nullable": true
          },
          "number": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "integer": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "boolean": {
            "type": "boolean",
            "nullable": true
          },
          "point": {
            "$ref": "#/components/schemas/GeoPoint"
          }
        }
      },
      "ContainsFilter2": {
        "required": [
          "field",
          "value"
        ],
        "type": "object",
        "properties": {
          "field": {
            "minLength": 1,
            "type": "string"
          },
          "value": {
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "EndsWithFilter2": {
        "required": [
          "field",
          "value"
        ],
        "type": "object",
        "properties": {
          "field": {
            "minLength": 1,
            "type": "string"
          },
          "value": {
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "EqualFilter2": {
        "required": [
          "field"
        ],
        "type": "object",
        "properties": {
          "field": {
            "minLength": 1,
            "type": "string"
          },
          "string": {
            "type": "string",
            "nullable": true
          },
          "number": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "integer": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "boolean": {
            "type": "boolean",
            "nullable": true
          },
          "point": {
            "$ref": "#/components/schemas/GeoPoint"
          }
        }
      },
      "Filter2": {
        "type": "object",
        "properties": {
          "logical": {
            "$ref": "#/components/schemas/LogicalFilter"
          },
          "and": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter2"
            },
            "nullable": true
          },
          "or": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter2"
            },
            "nullable": true
          },
          "binary": {
            "$ref": "#/components/schemas/BinaryFilter2"
          },
          "eq": {
            "$ref": "#/components/schemas/EqualFilter2"
          },
          "ne": {
            "$ref": "#/components/schemas/NotEqualFilter2"
          },
          "gt": {
            "$ref": "#/components/schemas/GreaterThanFilter2"
          },
          "gte": {
            "$ref": "#/components/schemas/GreaterThanOrEqualFilter2"
          },
          "lt": {
            "$ref": "#/components/schemas/LesserThanFilter2"
          },
          "lte": {
            "$ref": "#/components/schemas/LesserThanOrEqualFilter2"
          },
          "startsWith": {
            "$ref": "#/components/schemas/StartsWithFilter2"
          },
          "endsWith": {
            "$ref": "#/components/schemas/EndsWithFilter2"
          },
          "contains": {
            "$ref": "#/components/schemas/ContainsFilter2"
          },
          "between": {
            "$ref": "#/components/schemas/RangeFilter2"
          },
          "not": {
            "$ref": "#/components/schemas/Filter2"
          }
        }
      },
      "GreaterThanFilter2": {
        "required": [
          "field"
        ],
        "type": "object",
        "properties": {
          "field": {
            "minLength": 1,
            "type": "string"
          },
          "string": {
            "type": "string",
            "nullable": true
          },
          "number": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "integer": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "boolean": {
            "type": "boolean",
            "nullable": true
          },
          "point": {
            "$ref": "#/components/schemas/GeoPoint"
          }
        }
      },
      "GreaterThanOrEqualFilter2": {
        "required": [
          "field"
        ],
        "type": "object",
        "properties": {
          "field": {
            "minLength": 1,
            "type": "string"
          },
          "string": {
            "type": "string",
            "nullable": true
          },
          "number": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "integer": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "boolean": {
            "type": "boolean",
            "nullable": true
          },
          "point": {
            "$ref": "#/components/schemas/GeoPoint"
          }
        }
      },
      "LesserThanFilter2": {
        "required": [
          "field"
        ],
        "type": "object",
        "properties": {
          "field": {
            "minLength": 1,
            "type": "string"
          },
          "string": {
            "type": "string",
            "nullable": true
          },
          "number": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "integer": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "boolean": {
            "type": "boolean",
            "nullable": true
          },
          "point": {
            "$ref": "#/components/schemas/GeoPoint"
          }
        }
      },
      "LesserThanOrEqualFilter2": {
        "required": [
          "field"
        ],
        "type": "object",
        "properties": {
          "field": {
            "minLength": 1,
            "type": "string"
          },
          "string": {
            "type": "string",
            "nullable": true
          },
          "number": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "integer": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "boolean": {
            "type": "boolean",
            "nullable": true
          },
          "point": {
            "$ref": "#/components/schemas/GeoPoint"
          }
        }
      },
      "NewServerTerminal": {
        "required": [
          "address",
          "provider",
          "role",
          "type"
        ],
        "type": "object",
        "properties": {
          "settings": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          },
          "provider": {
            "minLength": 1,
            "type": "string"
          },
          "role": {
            "$ref": "#/components/schemas/TerminalRoles"
          },
          "type": {
            "$ref": "#/components/schemas/ServerTerminalType"
          },
          "address": {
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "NewTerminalAssignmentRequest": {
        "type": "object",
        "properties": {
          "role": {
            "$ref": "#/components/schemas/TerminalRoles"
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "type": "string",
            "nullable": true
          },
          "terminalId": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "NotEqualFilter2": {
        "required": [
          "field"
        ],
        "type": "object",
        "properties": {
          "field": {
            "minLength": 1,
            "type": "string"
          },
          "string": {
            "type": "string",
            "nullable": true
          },
          "number": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "integer": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "boolean": {
            "type": "boolean",
            "nullable": true
          },
          "point": {
            "$ref": "#/components/schemas/GeoPoint"
          }
        }
      },
      "PageRequest2": {
        "required": [
          "page",
          "size"
        ],
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PageSort2"
            },
            "nullable": true
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter2"
            },
            "nullable": true
          }
        }
      },
      "PageResultOfServerTerminal": {
        "required": [
          "request",
          "totalItems",
          "totalPages"
        ],
        "type": "object",
        "properties": {
          "request": {
            "$ref": "#/components/schemas/PageRequest2"
          },
          "totalItems": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServerTerminal"
            },
            "nullable": true
          },
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "self": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "first": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "next": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "previous": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "last": {
            "type": "string",
            "format": "uri",
            "nullable": true
          }
        }
      },
      "PageResultOfTerminalAssignmentRequest": {
        "required": [
          "request",
          "totalItems",
          "totalPages"
        ],
        "type": "object",
        "properties": {
          "request": {
            "$ref": "#/components/schemas/PageRequest2"
          },
          "totalItems": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TerminalAssignmentRequest"
            },
            "nullable": true
          },
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "self": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "first": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "next": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "previous": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "last": {
            "type": "string",
            "format": "uri",
            "nullable": true
          }
        }
      },
      "PageSort2": {
        "required": [
          "field"
        ],
        "type": "object",
        "properties": {
          "field": {
            "minLength": 1,
            "type": "string"
          },
          "direction": {
            "$ref": "#/components/schemas/PageSortDirection"
          },
          "ascending": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "RangeFilter2": {
        "required": [
          "field"
        ],
        "type": "object",
        "properties": {
          "field": {
            "minLength": 1,
            "type": "string"
          },
          "lower": {
            "$ref": "#/components/schemas/FilterValue"
          },
          "upper": {
            "$ref": "#/components/schemas/FilterValue"
          }
        }
      },
      "RequestedTerminal": {
        "required": [
          "terminalId"
        ],
        "type": "object",
        "properties": {
          "terminalId": {
            "minLength": 1,
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ServerTerminalType"
          },
          "address": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ServerTerminal": {
        "required": [
          "address",
          "provider",
          "role",
          "source",
          "status",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ServerTerminalType"
          },
          "address": {
            "minLength": 1,
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/TerminalStatus"
          },
          "lastChanged": {
            "type": "string",
            "format": "date-time"
          },
          "source": {
            "$ref": "#/components/schemas/TerminalSource"
          },
          "role": {
            "$ref": "#/components/schemas/TerminalRoles"
          },
          "sourceId": {
            "type": "string",
            "nullable": true
          },
          "settings": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          },
          "provider": {
            "minLength": 1,
            "type": "string"
          },
          "id": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ServerTerminalType": {
        "enum": [
          "email",
          "phoneNumber",
          "alphaNumeric"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "ServerTerminalType",
          "modelAsString": true
        }
      },
      "StartsWithFilter2": {
        "required": [
          "field",
          "value"
        ],
        "type": "object",
        "properties": {
          "field": {
            "minLength": 1,
            "type": "string"
          },
          "value": {
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "TerminalAssignment": {
        "required": [
          "tenantId",
          "timeStamp"
        ],
        "type": "object",
        "properties": {
          "terminalId": {
            "type": "string",
            "nullable": true
          },
          "tenantId": {
            "minLength": 1,
            "type": "string"
          },
          "timeStamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "TerminalAssignmentRequest": {
        "required": [
          "id",
          "requester",
          "terminal",
          "timeStamp"
        ],
        "type": "object",
        "properties": {
          "terminal": {
            "$ref": "#/components/schemas/RequestedTerminal"
          },
          "requester": {
            "minLength": 1,
            "type": "string"
          },
          "timeStamp": {
            "type": "string",
            "format": "date-time"
          },
          "response": {
            "$ref": "#/components/schemas/TerminalAssignmentResponse"
          },
          "id": {
            "minLength": 1,
            "type": "string"
          },
          "assignment": {
            "$ref": "#/components/schemas/TerminalAssignment"
          }
        }
      },
      "TerminalAssignmentResponse": {
        "required": [
          "responder",
          "responseType",
          "timeStamp"
        ],
        "type": "object",
        "properties": {
          "responder": {
            "minLength": 1,
            "type": "string"
          },
          "responseType": {
            "$ref": "#/components/schemas/ResourceAssignmentResponseType"
          },
          "timeStamp": {
            "type": "string",
            "format": "date-time"
          },
          "notes": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "TerminalLookup": {
        "required": [
          "address",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ServerTerminalType"
          },
          "address": {
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "TerminalRoles": {
        "enum": [
          "default",
          "sender",
          "receiver",
          "both"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "TerminalRoles",
          "modelAsString": true
        }
      },
      "TerminalSource": {
        "enum": [
          "unknown",
          "inventory",
          "customer"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "TerminalSource",
          "modelAsString": true
        }
      },
      "TerminalStatus": {
        "enum": [
          "none",
          "active",
          "reported",
          "blocked"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "TerminalStatus",
          "modelAsString": true
        }
      },
      "BinaryFilter3": {
        "required": [
          "field",
          "op"
        ],
        "type": "object",
        "properties": {
          "op": {
            "$ref": "#/components/schemas/WebFilterOperator"
          },
          "range": {
            "$ref": "#/components/schemas/Range"
          },
          "field": {
            "minLength": 1,
            "type": "string"
          },
          "string": {
            "type": "string",
            "nullable": true
          },
          "number": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "integer": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "boolean": {
            "type": "boolean",
            "nullable": true
          },
          "point": {
            "$ref": "#/components/schemas/GeoPoint"
          }
        }
      },
      "ChannelType1": {
        "enum": [
          "sms",
          "messenger",
          "whatsapp",
          "email",
          "viber",
          "rcs",
          "push",
          "telegram",
          "sandbox"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "ChannelType",
          "modelAsString": true
        }
      },
      "ContainsFilter3": {
        "required": [
          "field",
          "value"
        ],
        "type": "object",
        "properties": {
          "field": {
            "minLength": 1,
            "type": "string"
          },
          "value": {
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "EmailAddress": {
        "required": [
          "address"
        ],
        "type": "object",
        "properties": {
          "address": {
            "minLength": 1,
            "type": "string",
            "format": "email"
          },
          "displayName": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "EndsWithFilter3": {
        "required": [
          "field",
          "value"
        ],
        "type": "object",
        "properties": {
          "field": {
            "minLength": 1,
            "type": "string"
          },
          "value": {
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "EqualFilter3": {
        "required": [
          "field"
        ],
        "type": "object",
        "properties": {
          "field": {
            "minLength": 1,
            "type": "string"
          },
          "string": {
            "type": "string",
            "nullable": true
          },
          "number": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "integer": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "boolean": {
            "type": "boolean",
            "nullable": true
          },
          "point": {
            "$ref": "#/components/schemas/GeoPoint"
          }
        }
      },
      "Filter3": {
        "type": "object",
        "properties": {
          "logical": {
            "$ref": "#/components/schemas/LogicalFilter"
          },
          "and": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter3"
            },
            "nullable": true
          },
          "or": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter3"
            },
            "nullable": true
          },
          "binary": {
            "$ref": "#/components/schemas/BinaryFilter3"
          },
          "eq": {
            "$ref": "#/components/schemas/EqualFilter3"
          },
          "ne": {
            "$ref": "#/components/schemas/NotEqualFilter3"
          },
          "gt": {
            "$ref": "#/components/schemas/GreaterThanFilter3"
          },
          "gte": {
            "$ref": "#/components/schemas/GreaterThanOrEqualFilter3"
          },
          "lt": {
            "$ref": "#/components/schemas/LesserThanFilter3"
          },
          "lte": {
            "$ref": "#/components/schemas/LesserThanOrEqualFilter3"
          },
          "startsWith": {
            "$ref": "#/components/schemas/StartsWithFilter3"
          },
          "endsWith": {
            "$ref": "#/components/schemas/EndsWithFilter3"
          },
          "contains": {
            "$ref": "#/components/schemas/ContainsFilter3"
          },
          "between": {
            "$ref": "#/components/schemas/RangeFilter3"
          },
          "not": {
            "$ref": "#/components/schemas/Filter3"
          }
        }
      },
      "GreaterThanFilter3": {
        "required": [
          "field"
        ],
        "type": "object",
        "properties": {
          "field": {
            "minLength": 1,
            "type": "string"
          },
          "string": {
            "type": "string",
            "nullable": true
          },
          "number": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "integer": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "boolean": {
            "type": "boolean",
            "nullable": true
          },
          "point": {
            "$ref": "#/components/schemas/GeoPoint"
          }
        }
      },
      "GreaterThanOrEqualFilter3": {
        "required": [
          "field"
        ],
        "type": "object",
        "properties": {
          "field": {
            "minLength": 1,
            "type": "string"
          },
          "string": {
            "type": "string",
            "nullable": true
          },
          "number": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "integer": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "boolean": {
            "type": "boolean",
            "nullable": true
          },
          "point": {
            "$ref": "#/components/schemas/GeoPoint"
          }
        }
      },
      "LesserThanFilter3": {
        "required": [
          "field"
        ],
        "type": "object",
        "properties": {
          "field": {
            "minLength": 1,
            "type": "string"
          },
          "string": {
            "type": "string",
            "nullable": true
          },
          "number": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "integer": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "boolean": {
            "type": "boolean",
            "nullable": true
          },
          "point": {
            "$ref": "#/components/schemas/GeoPoint"
          }
        }
      },
      "LesserThanOrEqualFilter3": {
        "required": [
          "field"
        ],
        "type": "object",
        "properties": {
          "field": {
            "minLength": 1,
            "type": "string"
          },
          "string": {
            "type": "string",
            "nullable": true
          },
          "number": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "integer": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "boolean": {
            "type": "boolean",
            "nullable": true
          },
          "point": {
            "$ref": "#/components/schemas/GeoPoint"
          }
        }
      },
      "MessageField": {
        "enum": [
          "subject",
          "body",
          "context"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "MessageField",
          "modelAsString": true
        }
      },
      "MessageRoute": {
        "required": [
          "active",
          "channel",
          "destinationUrl",
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "channel": {
            "$ref": "#/components/schemas/RouteChannel"
          },
          "id": {
            "minLength": 1,
            "type": "string",
            "description": "The unique identifier of the route"
          },
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "The descriptive name of the route"
          },
          "active": {
            "type": "boolean",
            "description": "Indicates the active state of a route"
          },
          "destinationUrl": {
            "minLength": 1,
            "type": "string",
            "description": "The HTTP URL address where the inbound message\r\nwill be delivered"
          },
          "retryCount": {
            "type": "integer",
            "description": "The number of retries to deliver the inbound message",
            "format": "int32"
          },
          "secret": {
            "type": "string",
            "description": "A secret code that is used to sign the webhooks",
            "nullable": true
          },
          "context": {
            "type": "object",
            "additionalProperties": {},
            "description": "A context that is appended to the message before\r\nthe delivery (useful for correlation)",
            "nullable": true
          },
          "match": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RouteMatchRule"
            },
            "description": "A list of rules that are used to match a message to the given route",
            "nullable": true
          }
        },
        "description": "Specifies the rules to route inbound messages (delivered as webhooks)"
      },
      "MessageRouteStatusUpdate": {
        "required": [
          "active"
        ],
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean",
            "description": "Wether or not the message route should be active or not"
          }
        },
        "description": "The request to change the status of a message route"
      },
      "NewMessageRoute": {
        "required": [
          "channel",
          "destinationUrl",
          "name"
        ],
        "type": "object",
        "properties": {
          "channel": {
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9_.-]+$",
            "type": "string",
            "description": "The name of the channel transporting the inbound messages"
          },
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "A descriptive name of the route (for display)"
          },
          "destinationUrl": {
            "minLength": 1,
            "type": "string",
            "description": "The HTTP URL address where the inbound message\r\nwill be delivered"
          },
          "active": {
            "type": "boolean",
            "description": "Whether the route must be set as immediately active"
          },
          "retryCount": {
            "type": "integer",
            "description": "The number of retries to deliver the inbound message",
            "format": "int32"
          },
          "secret": {
            "type": "string",
            "description": "A secret code that is used to sign the webhooks",
            "nullable": true
          },
          "context": {
            "type": "object",
            "additionalProperties": {},
            "description": "A context that is appended to the message before\r\nthe delivery (useful for correlation)",
            "nullable": true
          },
          "match": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RouteMatchRule"
            },
            "description": "A list of rules that are used to match a message to the given route",
            "nullable": true
          }
        },
        "description": "The request to create a new route to receive inbound messages"
      },
      "NotEqualFilter3": {
        "required": [
          "field"
        ],
        "type": "object",
        "properties": {
          "field": {
            "minLength": 1,
            "type": "string"
          },
          "string": {
            "type": "string",
            "nullable": true
          },
          "number": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "integer": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "boolean": {
            "type": "boolean",
            "nullable": true
          },
          "point": {
            "$ref": "#/components/schemas/GeoPoint"
          }
        }
      },
      "PageRequest3": {
        "required": [
          "page",
          "size"
        ],
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PageSort3"
            },
            "nullable": true
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter3"
            },
            "nullable": true
          }
        }
      },
      "PageResultOfMessageRoute": {
        "required": [
          "request",
          "totalItems",
          "totalPages"
        ],
        "type": "object",
        "properties": {
          "request": {
            "$ref": "#/components/schemas/PageRequest3"
          },
          "totalItems": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageRoute"
            },
            "nullable": true
          },
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "self": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "first": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "next": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "previous": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "last": {
            "type": "string",
            "format": "uri",
            "nullable": true
          }
        }
      },
      "PageSort3": {
        "required": [
          "field"
        ],
        "type": "object",
        "properties": {
          "field": {
            "minLength": 1,
            "type": "string"
          },
          "direction": {
            "$ref": "#/components/schemas/PageSortDirection"
          },
          "ascending": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "RangeFilter3": {
        "required": [
          "field"
        ],
        "type": "object",
        "properties": {
          "field": {
            "minLength": 1,
            "type": "string"
          },
          "lower": {
            "$ref": "#/components/schemas/FilterValue"
          },
          "upper": {
            "$ref": "#/components/schemas/FilterValue"
          }
        }
      },
      "RouteChannel": {
        "required": [
          "id",
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9_.-]+$",
            "type": "string",
            "description": "The name of the channel instance"
          },
          "type": {
            "$ref": "#/components/schemas/ChannelType1"
          },
          "id": {
            "minLength": 1,
            "type": "string",
            "description": "The unique identifier of the channel"
          }
        },
        "description": "Describes a channel that receives and routes\r\ninbound messages"
      },
      "RouteMatchRule": {
        "type": "object",
        "properties": {
          "text": {
            "$ref": "#/components/schemas/TextMatch"
          },
          "receiver": {
            "$ref": "#/components/schemas/Terminal"
          }
        },
        "description": "A rule used to match the configuration for the routing of a message"
      },
      "StartsWithFilter3": {
        "required": [
          "field",
          "value"
        ],
        "type": "object",
        "properties": {
          "field": {
            "minLength": 1,
            "type": "string"
          },
          "value": {
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "Terminal": {
        "type": "object",
        "properties": {
          "emailAddress": {
            "type": "string",
            "format": "email",
            "nullable": true
          },
          "email": {
            "$ref": "#/components/schemas/EmailAddress"
          },
          "number": {
            "type": "string",
            "format": "tel",
            "nullable": true
          },
          "conversation": {
            "type": "string",
            "nullable": true
          },
          "user": {
            "type": "string",
            "nullable": true
          },
          "url": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": {}
      },
      "TextMatch": {
        "required": [
          "field",
          "value"
        ],
        "type": "object",
        "properties": {
          "field": {
            "$ref": "#/components/schemas/MessageField"
          },
          "operator": {
            "$ref": "#/components/schemas/TextMatchOperator"
          },
          "value": {
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "TextMatchOperator": {
        "enum": [
          "startsWith",
          "endsWith",
          "contains",
          "notContains"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "TextMatchOperator",
          "modelAsString": true
        }
      },
      "BinaryFilter4": {
        "required": [
          "field",
          "op"
        ],
        "type": "object",
        "properties": {
          "op": {
            "$ref": "#/components/schemas/WebFilterOperator"
          },
          "range": {
            "$ref": "#/components/schemas/Range"
          },
          "field": {
            "minLength": 1,
            "type": "string"
          },
          "string": {
            "type": "string",
            "nullable": true
          },
          "number": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "integer": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "boolean": {
            "type": "boolean",
            "nullable": true
          },
          "point": {
            "$ref": "#/components/schemas/GeoPoint"
          }
        }
      },
      "ContainsFilter4": {
        "required": [
          "field",
          "value"
        ],
        "type": "object",
        "properties": {
          "field": {
            "minLength": 1,
            "type": "string"
          },
          "value": {
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "EndsWithFilter4": {
        "required": [
          "field",
          "value"
        ],
        "type": "object",
        "properties": {
          "field": {
            "minLength": 1,
            "type": "string"
          },
          "value": {
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "EqualFilter4": {
        "required": [
          "field"
        ],
        "type": "object",
        "properties": {
          "field": {
            "minLength": 1,
            "type": "string"
          },
          "string": {
            "type": "string",
            "nullable": true
          },
          "number": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "integer": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "boolean": {
            "type": "boolean",
            "nullable": true
          },
          "point": {
            "$ref": "#/components/schemas/GeoPoint"
          }
        }
      },
      "Filter4": {
        "type": "object",
        "properties": {
          "logical": {
            "$ref": "#/components/schemas/LogicalFilter"
          },
          "and": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter4"
            },
            "nullable": true
          },
          "or": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter4"
            },
            "nullable": true
          },
          "binary": {
            "$ref": "#/components/schemas/BinaryFilter4"
          },
          "eq": {
            "$ref": "#/components/schemas/EqualFilter4"
          },
          "ne": {
            "$ref": "#/components/schemas/NotEqualFilter4"
          },
          "gt": {
            "$ref": "#/components/schemas/GreaterThanFilter4"
          },
          "gte": {
            "$ref": "#/components/schemas/GreaterThanOrEqualFilter4"
          },
          "lt": {
            "$ref": "#/components/schemas/LesserThanFilter4"
          },
          "lte": {
            "$ref": "#/components/schemas/LesserThanOrEqualFilter4"
          },
          "startsWith": {
            "$ref": "#/components/schemas/StartsWithFilter4"
          },
          "endsWith": {
            "$ref": "#/components/schemas/EndsWithFilter4"
          },
          "contains": {
            "$ref": "#/components/schemas/ContainsFilter4"
          },
          "between": {
            "$ref": "#/components/schemas/RangeFilter4"
          },
          "not": {
            "$ref": "#/components/schemas/Filter4"
          }
        }
      },
      "GreaterThanFilter4": {
        "required": [
          "field"
        ],
        "type": "object",
        "properties": {
          "field": {
            "minLength": 1,
            "type": "string"
          },
          "string": {
            "type": "string",
            "nullable": true
          },
          "number": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "integer": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "boolean": {
            "type": "boolean",
            "nullable": true
          },
          "point": {
            "$ref": "#/components/schemas/GeoPoint"
          }
        }
      },
      "GreaterThanOrEqualFilter4": {
        "required": [
          "field"
        ],
        "type": "object",
        "properties": {
          "field": {
            "minLength": 1,
            "type": "string"
          },
          "string": {
            "type": "string",
            "nullable": true
          },
          "number": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "integer": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "boolean": {
            "type": "boolean",
            "nullable": true
          },
          "point": {
            "$ref": "#/components/schemas/GeoPoint"
          }
        }
      },
      "LesserThanFilter4": {
        "required": [
          "field"
        ],
        "type": "object",
        "properties": {
          "field": {
            "minLength": 1,
            "type": "string"
          },
          "string": {
            "type": "string",
            "nullable": true
          },
          "number": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "integer": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "boolean": {
            "type": "boolean",
            "nullable": true
          },
          "point": {
            "$ref": "#/components/schemas/GeoPoint"
          }
        }
      },
      "LesserThanOrEqualFilter4": {
        "required": [
          "field"
        ],
        "type": "object",
        "properties": {
          "field": {
            "minLength": 1,
            "type": "string"
          },
          "string": {
            "type": "string",
            "nullable": true
          },
          "number": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "integer": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "boolean": {
            "type": "boolean",
            "nullable": true
          },
          "point": {
            "$ref": "#/components/schemas/GeoPoint"
          }
        }
      },
      "NewWebhookSubscription": {
        "required": [
          "destinationUrl",
          "events"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "A descriptive custom name of the subscription",
            "nullable": true
          },
          "destinationUrl": {
            "minLength": 1,
            "type": "string",
            "description": "The URL where the webhooks should be delivered",
            "format": "uri"
          },
          "secret": {
            "type": "string",
            "description": "An optional secret word that is used to sign the webhooks to secure them",
            "nullable": true
          },
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A set of optional headers that are attached to the webhook\r\nrequest (for correlation)",
            "nullable": true
          },
          "events": {
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The type of message event to subscribe"
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter4"
            },
            "description": "An optional set of filters that restrict the events to be notified",
            "nullable": true
          },
          "retryCount": {
            "type": "integer",
            "description": "The number of attempts to perform when trying to deliver\r\nthe webhook, before failing",
            "format": "int32"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {},
            "description": "A list of metadata associated to the subscription",
            "nullable": true
          }
        },
        "description": "Requests the subscription to the notification of event\r\noccurrences within the system"
      },
      "NotEqualFilter4": {
        "required": [
          "field"
        ],
        "type": "object",
        "properties": {
          "field": {
            "minLength": 1,
            "type": "string"
          },
          "string": {
            "type": "string",
            "nullable": true
          },
          "number": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "integer": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "boolean": {
            "type": "boolean",
            "nullable": true
          },
          "point": {
            "$ref": "#/components/schemas/GeoPoint"
          }
        }
      },
      "PageRequest4": {
        "required": [
          "page",
          "size"
        ],
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PageSort4"
            },
            "nullable": true
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter4"
            },
            "nullable": true
          }
        }
      },
      "PageResultOfWebhookSubscription": {
        "required": [
          "request",
          "totalItems",
          "totalPages"
        ],
        "type": "object",
        "properties": {
          "request": {
            "$ref": "#/components/schemas/PageRequest4"
          },
          "totalItems": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WebhookSubscription"
            },
            "nullable": true
          },
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "self": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "first": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "next": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "previous": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "last": {
            "type": "string",
            "format": "uri",
            "nullable": true
          }
        }
      },
      "PageSort4": {
        "required": [
          "field"
        ],
        "type": "object",
        "properties": {
          "field": {
            "minLength": 1,
            "type": "string"
          },
          "direction": {
            "$ref": "#/components/schemas/PageSortDirection"
          },
          "ascending": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "RangeFilter4": {
        "required": [
          "field"
        ],
        "type": "object",
        "properties": {
          "field": {
            "minLength": 1,
            "type": "string"
          },
          "lower": {
            "$ref": "#/components/schemas/FilterValue"
          },
          "upper": {
            "$ref": "#/components/schemas/FilterValue"
          }
        }
      },
      "StartsWithFilter4": {
        "required": [
          "field",
          "value"
        ],
        "type": "object",
        "properties": {
          "field": {
            "minLength": 1,
            "type": "string"
          },
          "value": {
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "WebhookSubscription": {
        "required": [
          "active",
          "destinationUrl",
          "events",
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "destinationUrl": {
            "minLength": 1,
            "type": "string",
            "description": "The HTTP URL address where the notifications\r\nare delivered (as webhooks)",
            "format": "uri"
          },
          "secret": {
            "type": "string",
            "description": "An optional secret string used to sign the webhooks\r\ndelivered to the subscriber",
            "nullable": true
          },
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A set of additional headers attached to the HTTP request\r\nfired towards the destination URL (typically used for context)",
            "nullable": true
          },
          "id": {
            "minLength": 1,
            "type": "string",
            "description": "The unique identider of the subscription"
          },
          "events": {
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of message event types subscribed"
          },
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "A descriptive name of the subscription (for display)"
          },
          "active": {
            "type": "boolean",
            "description": "The active state of the subscription"
          },
          "retryCount": {
            "type": "integer",
            "description": "The number of attempts to perform when trying to deliver\r\nthe webhook, before failing",
            "format": "int32"
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter4"
            },
            "description": "An optional set of filters used to restrict the\r\ndelivery of webhooks",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {},
            "description": "A list of metadata associated to the subscription",
            "nullable": true
          }
        },
        "description": "The subscription to the notification of an event"
      },
      "WebhookSubscriptionStatusUpdate": {
        "required": [
          "active"
        ],
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean",
            "description": "Wether or not the subscription should be active"
          }
        },
        "description": "A request to change the active status of a subscription"
      }
    }
  }
}