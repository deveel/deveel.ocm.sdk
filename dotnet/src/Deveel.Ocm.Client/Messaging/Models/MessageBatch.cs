// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Deveel.Messaging.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// A batch of messages sent in one single operation
    /// </summary>
    public partial class MessageBatch
    {
        /// <summary>
        /// Initializes a new instance of the MessageBatch class.
        /// </summary>
        public MessageBatch()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MessageBatch class.
        /// </summary>
        /// <param name="messages">The list of messages included in the
        /// batch</param>
        /// <param name="context">A context that is provided to the batch:
        /// messages within the batch
        /// will inherit this when they don't specify one explicitly</param>
        public MessageBatch(IList<Message> messages, IDictionary<string, object> context = default(IDictionary<string, object>))
        {
            Context = context;
            Messages = messages;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets a context that is provided to the batch: messages
        /// within the batch
        /// will inherit this when they don't specify one explicitly
        /// </summary>
        [JsonProperty(PropertyName = "context")]
        public IDictionary<string, object> Context { get; set; }

        /// <summary>
        /// Gets or sets the list of messages included in the batch
        /// </summary>
        [JsonProperty(PropertyName = "messages")]
        public IList<Message> Messages { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Messages == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Messages");
            }
            if (Messages != null)
            {
                foreach (var element in Messages)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
