// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Deveel.Messaging.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// A single outbound omni-channel message
    /// </summary>
    public partial class Message
    {
        /// <summary>
        /// Initializes a new instance of the Message class.
        /// </summary>
        public Message()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Message class.
        /// </summary>
        /// <param name="channel">The name of the channel that is used to
        /// transport the message</param>
        /// <param name="additionalProperties">Unmatched properties from the
        /// message are deserialized this collection</param>
        /// <param name="options">Configuration options for modeling the
        /// behavior of the channel
        /// when transporting the message</param>
        /// <param name="context">A custom-defined context of the message
        /// (typically used to correlate).</param>
        public Message(string channel, Terminal receiver, MessageContent content, IDictionary<string, object> additionalProperties = default(IDictionary<string, object>), SenderTerminal sender = default(SenderTerminal), IDictionary<string, object> options = default(IDictionary<string, object>), FallbackMessage fallback = default(FallbackMessage), IDictionary<string, object> context = default(IDictionary<string, object>))
        {
            AdditionalProperties = additionalProperties;
            Sender = sender;
            Channel = channel;
            Options = options;
            Fallback = fallback;
            Receiver = receiver;
            Content = content;
            Context = context;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets unmatched properties from the message are deserialized
        /// this collection
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sender")]
        public SenderTerminal Sender { get; set; }

        /// <summary>
        /// Gets or sets the name of the channel that is used to transport the
        /// message
        /// </summary>
        [JsonProperty(PropertyName = "channel")]
        public string Channel { get; set; }

        /// <summary>
        /// Gets or sets configuration options for modeling the behavior of the
        /// channel
        /// when transporting the message
        /// </summary>
        [JsonProperty(PropertyName = "options")]
        public IDictionary<string, object> Options { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "fallback")]
        public FallbackMessage Fallback { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "receiver")]
        public Terminal Receiver { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "content")]
        public MessageContent Content { get; set; }

        /// <summary>
        /// Gets or sets a custom-defined context of the message (typically
        /// used to correlate).
        /// </summary>
        [JsonProperty(PropertyName = "context")]
        public IDictionary<string, object> Context { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Channel == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Channel");
            }
            if (Receiver == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Receiver");
            }
            if (Content == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Content");
            }
            if (Sender != null)
            {
                Sender.Validate();
            }
            if (Fallback != null)
            {
                Fallback.Validate();
            }
            if (Receiver != null)
            {
                Receiver.Validate();
            }
            if (Content != null)
            {
                Content.Validate();
            }
        }
    }
}
