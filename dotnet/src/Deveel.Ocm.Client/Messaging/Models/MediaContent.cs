// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Deveel.Messaging.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Details the media content of a message
    /// </summary>
    public partial class MediaContent
    {
        /// <summary>
        /// Initializes a new instance of the MediaContent class.
        /// </summary>
        public MediaContent()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MediaContent class.
        /// </summary>
        /// <param name="type">Possible values include: 'unknown', 'file',
        /// 'image', 'audio', 'video'</param>
        /// <param name="source">The URL to the storage where the media is
        /// located
        /// and can be retrieved by the system and forwarded</param>
        /// <param name="contentType">The MIME type of the media file
        /// sent</param>
        public MediaContent(MediaType type, string source, string contentType = default(string))
        {
            Type = type;
            ContentType = contentType;
            Source = source;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets possible values include: 'unknown', 'file', 'image',
        /// 'audio', 'video'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public MediaType Type { get; set; }

        /// <summary>
        /// Gets or sets the MIME type of the media file sent
        /// </summary>
        [JsonProperty(PropertyName = "contentType")]
        public string ContentType { get; set; }

        /// <summary>
        /// Gets or sets the URL to the storage where the media is located
        /// and can be retrieved by the system and forwarded
        /// </summary>
        [JsonProperty(PropertyName = "source")]
        public string Source { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Source == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Source");
            }
        }
    }
}
