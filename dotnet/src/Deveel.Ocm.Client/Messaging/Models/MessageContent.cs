// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Deveel.Messaging.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Represents the content of a message
    /// </summary>
    public partial class MessageContent
    {
        /// <summary>
        /// Initializes a new instance of the MessageContent class.
        /// </summary>
        public MessageContent()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MessageContent class.
        /// </summary>
        /// <param name="text">Simple textual content</param>
        /// <param name="html">The content of the message is HTML base-64
        /// encoded text</param>
        /// <param name="attach">Attachments embedded in the message alognside
        /// the textual content (simple or HTML)</param>
        /// <param name="parts">The content of the message is multi-parted
        /// (typical of e-mail channels)</param>
        public MessageContent(string text = default(string), string html = default(string), IList<Attachment> attach = default(IList<Attachment>), MediaContent media = default(MediaContent), IList<ContentPart> parts = default(IList<ContentPart>), CardContent card = default(CardContent), ButtonContent button = default(ButtonContent))
        {
            Text = text;
            Html = html;
            Attach = attach;
            Media = media;
            Parts = parts;
            Card = card;
            Button = button;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets simple textual content
        /// </summary>
        [JsonProperty(PropertyName = "text")]
        public string Text { get; set; }

        /// <summary>
        /// Gets or sets the content of the message is HTML base-64 encoded
        /// text
        /// </summary>
        [JsonProperty(PropertyName = "html")]
        public string Html { get; set; }

        /// <summary>
        /// Gets or sets attachments embedded in the message alognside the
        /// textual content (simple or HTML)
        /// </summary>
        [JsonProperty(PropertyName = "attach")]
        public IList<Attachment> Attach { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "media")]
        public MediaContent Media { get; set; }

        /// <summary>
        /// Gets or sets the content of the message is multi-parted (typical of
        /// e-mail channels)
        /// </summary>
        [JsonProperty(PropertyName = "parts")]
        public IList<ContentPart> Parts { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "card")]
        public CardContent Card { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "button")]
        public ButtonContent Button { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Attach != null)
            {
                foreach (var element in Attach)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (Media != null)
            {
                Media.Validate();
            }
            if (Card != null)
            {
                Card.Validate();
            }
            if (Button != null)
            {
                Button.Validate();
            }
        }
    }
}
