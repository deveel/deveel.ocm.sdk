// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Deveel.Messaging.Models
{
    using Newtonsoft.Json;

    /// <summary>
    /// Defines values for ChannelType.
    /// </summary>
    /// <summary>
    /// Determine base value for a given allowed value if exists, else return
    /// the value itself
    /// </summary>
    [JsonConverter(typeof(ChannelTypeConverter))]
    public struct ChannelType : System.IEquatable<ChannelType>
    {
        private ChannelType(string underlyingValue)
        {
            UnderlyingValue=underlyingValue;
        }

        public static readonly ChannelType Sms = "sms";

        public static readonly ChannelType Messenger = "messenger";

        public static readonly ChannelType Whatsapp = "whatsapp";

        public static readonly ChannelType Email = "email";

        public static readonly ChannelType Viber = "viber";

        public static readonly ChannelType Rcs = "rcs";

        public static readonly ChannelType Push = "push";

        public static readonly ChannelType Telegram = "telegram";

        public static readonly ChannelType Sandbox = "sandbox";


        /// <summary>
        /// Underlying value of enum ChannelType
        /// </summary>
        private readonly string UnderlyingValue;

        /// <summary>
        /// Returns string representation for ChannelType
        /// </summary>
        public override string ToString()
        {
            return UnderlyingValue == null ? null : UnderlyingValue.ToString();
        }

        /// <summary>
        /// Compares enums of type ChannelType
        /// </summary>
        public bool Equals(ChannelType e)
        {
            return UnderlyingValue.Equals(e.UnderlyingValue);
        }

        /// <summary>
        /// Implicit operator to convert string to ChannelType
        /// </summary>
        public static implicit operator ChannelType(string value)
        {
            return new ChannelType(value);
        }

        /// <summary>
        /// Implicit operator to convert ChannelType to string
        /// </summary>
        public static implicit operator string(ChannelType e)
        {
            return e.UnderlyingValue;
        }

        /// <summary>
        /// Overriding == operator for enum ChannelType
        /// </summary>
        public static bool operator == (ChannelType e1, ChannelType e2)
        {
            return e2.Equals(e1);
        }

        /// <summary>
        /// Overriding != operator for enum ChannelType
        /// </summary>
        public static bool operator != (ChannelType e1, ChannelType e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>
        /// Overrides Equals operator for ChannelType
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is ChannelType && Equals((ChannelType)obj);
        }

        /// <summary>
        /// Returns for hashCode ChannelType
        /// </summary>
        public override int GetHashCode()
        {
            return UnderlyingValue.GetHashCode();
        }

    }
}
