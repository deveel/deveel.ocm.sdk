// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Deveel.Messaging.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// A single attachment to a message or to the part of a message
    /// </summary>
    public partial class Attachment
    {
        /// <summary>
        /// Initializes a new instance of the Attachment class.
        /// </summary>
        public Attachment()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Attachment class.
        /// </summary>
        /// <param name="id">The unique identifier (within the context of the
        /// message)
        /// of the attachment</param>
        /// <param name="content">The base-64 encoded content of the
        /// attachment</param>
        /// <param name="contentType">Specifies the MIME type of the content of
        /// the attachment</param>
        /// <param name="fileName">The file name of the attachment</param>
        /// <param name="type">Possible values include: 'inline',
        /// 'file'</param>
        public Attachment(string id, string content, string contentType = default(string), string fileName = default(string), AttachmentType? type = default(AttachmentType?))
        {
            Id = id;
            Content = content;
            ContentType = contentType;
            FileName = fileName;
            Type = type;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the unique identifier (within the context of the
        /// message)
        /// of the attachment
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets the base-64 encoded content of the attachment
        /// </summary>
        [JsonProperty(PropertyName = "content")]
        public string Content { get; set; }

        /// <summary>
        /// Gets or sets specifies the MIME type of the content of the
        /// attachment
        /// </summary>
        [JsonProperty(PropertyName = "contentType")]
        public string ContentType { get; set; }

        /// <summary>
        /// Gets or sets the file name of the attachment
        /// </summary>
        [JsonProperty(PropertyName = "fileName")]
        public string FileName { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'inline', 'file'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public AttachmentType? Type { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Id == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Id");
            }
            if (Content == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Content");
            }
        }
    }
}
