// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Deveel.Messaging.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The result to the request to enqueue a batch of messages
    /// </summary>
    public partial class MessageBatchResult
    {
        /// <summary>
        /// Initializes a new instance of the MessageBatchResult class.
        /// </summary>
        public MessageBatchResult()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MessageBatchResult class.
        /// </summary>
        /// <param name="batchId">The unique identifier of the batch within the
        /// system</param>
        /// <param name="context">The context that was specified when
        /// requesting to send
        /// the batch (for correlation)</param>
        /// <param name="messages">The list of results of the messages
        /// contained in the batch</param>
        public MessageBatchResult(string batchId, IDictionary<string, object> context = default(IDictionary<string, object>), IList<MessageResult> messages = default(IList<MessageResult>))
        {
            BatchId = batchId;
            Context = context;
            Messages = messages;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the unique identifier of the batch within the system
        /// </summary>
        [JsonProperty(PropertyName = "batchId")]
        public string BatchId { get; set; }

        /// <summary>
        /// Gets or sets the context that was specified when requesting to send
        /// the batch (for correlation)
        /// </summary>
        [JsonProperty(PropertyName = "context")]
        public IDictionary<string, object> Context { get; set; }

        /// <summary>
        /// Gets or sets the list of results of the messages contained in the
        /// batch
        /// </summary>
        [JsonProperty(PropertyName = "messages")]
        public IList<MessageResult> Messages { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (BatchId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "BatchId");
            }
            if (Messages != null)
            {
                foreach (var element in Messages)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
