// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Deveel.Messaging.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// A button content of a message
    /// </summary>
    public partial class ButtonContent
    {
        /// <summary>
        /// Initializes a new instance of the ButtonContent class.
        /// </summary>
        public ButtonContent()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ButtonContent class.
        /// </summary>
        /// <param name="text">The text displayed on the button</param>
        /// <param name="reply">The reply sent back from the receiver when
        /// clicking the button</param>
        /// <param name="dial">A telephone number dialed when the button is
        /// clicked by
        /// the receiver of the message</param>
        /// <param name="openUrl">A URL address that is opened on the browser
        /// of the receiver
        /// when the button is clicked</param>
        /// <param name="shareLocation">When the button is clicked the device
        /// shares the current location
        /// of the receiver to the sender of the message</param>
        public ButtonContent(string text, string reply = default(string), string dial = default(string), string openUrl = default(string), DisplayLocation displayLocation = default(DisplayLocation), bool? shareLocation = default(bool?))
        {
            Text = text;
            Reply = reply;
            Dial = dial;
            OpenUrl = openUrl;
            DisplayLocation = displayLocation;
            ShareLocation = shareLocation;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the text displayed on the button
        /// </summary>
        [JsonProperty(PropertyName = "text")]
        public string Text { get; set; }

        /// <summary>
        /// Gets or sets the reply sent back from the receiver when clicking
        /// the button
        /// </summary>
        [JsonProperty(PropertyName = "reply")]
        public string Reply { get; set; }

        /// <summary>
        /// Gets or sets a telephone number dialed when the button is clicked
        /// by
        /// the receiver of the message
        /// </summary>
        [JsonProperty(PropertyName = "dial")]
        public string Dial { get; set; }

        /// <summary>
        /// Gets or sets a URL address that is opened on the browser of the
        /// receiver
        /// when the button is clicked
        /// </summary>
        [JsonProperty(PropertyName = "openUrl")]
        public string OpenUrl { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "displayLocation")]
        public DisplayLocation DisplayLocation { get; set; }

        /// <summary>
        /// Gets or sets when the button is clicked the device shares the
        /// current location
        /// of the receiver to the sender of the message
        /// </summary>
        [JsonProperty(PropertyName = "shareLocation")]
        public bool? ShareLocation { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Text == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Text");
            }
            if (DisplayLocation != null)
            {
                DisplayLocation.Validate();
            }
        }
    }
}
