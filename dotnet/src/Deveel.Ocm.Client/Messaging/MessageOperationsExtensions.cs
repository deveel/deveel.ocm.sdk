// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Deveel.Messaging
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for MessageOperations.
    /// </summary>
    public static partial class MessageOperationsExtensions
    {
            /// <summary>
            /// Sends a batch of Messages
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static object BatchSend(this IMessageOperations operations, MessageBatch body)
            {
                return operations.BatchSendAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sends a batch of Messages
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> BatchSendAsync(this IMessageOperations operations, MessageBatch body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BatchSendWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Sends a batch of Messages
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<object> BatchSendWithHttpMessages(this IMessageOperations operations, MessageBatch body, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.BatchSendWithHttpMessagesAsync(body, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sends a single Message
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static object Send(this IMessageOperations operations, Message body)
            {
                return operations.SendAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sends a single Message
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> SendAsync(this IMessageOperations operations, Message body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SendWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Sends a single Message
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<object> SendWithHttpMessages(this IMessageOperations operations, Message body, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.SendWithHttpMessagesAsync(body, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a Received Message from Cache
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object GetReceived(this IMessageOperations operations, string id)
            {
                return operations.GetReceivedAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a Received Message from Cache
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetReceivedAsync(this IMessageOperations operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetReceivedWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a Received Message from Cache
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<object> GetReceivedWithHttpMessages(this IMessageOperations operations, string id, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.GetReceivedWithHttpMessagesAsync(id, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

    }
}
