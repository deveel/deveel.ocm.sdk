// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Deveel.Messaging.Management
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Webhook.
    /// </summary>
    public static partial class WebhookExtensions
    {
            /// <summary>
            /// Subscribes to Messages States
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static object Subscribe(this IWebhook operations, NewWebhookSubscription body)
            {
                return operations.SubscribeAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Subscribes to Messages States
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> SubscribeAsync(this IWebhook operations, NewWebhookSubscription body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SubscribeWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Subscribes to Messages States
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<object> SubscribeWithHttpMessages(this IWebhook operations, NewWebhookSubscription body, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.SubscribeWithHttpMessagesAsync(body, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a page of Webhook Subscriptions
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='size'>
            /// </param>
            public static object GetSubscriptions(this IWebhook operations, int? page = 1, int? size = 10)
            {
                return operations.GetSubscriptionsAsync(page, size).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a page of Webhook Subscriptions
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='size'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetSubscriptionsAsync(this IWebhook operations, int? page = 1, int? size = 10, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSubscriptionsWithHttpMessagesAsync(page, size, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a page of Webhook Subscriptions
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='size'>
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<object> GetSubscriptionsWithHttpMessages(this IWebhook operations, int? page = 1, int? size = 10, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.GetSubscriptionsWithHttpMessagesAsync(page, size, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a Subscription to Webhooks
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object GetSubscription(this IWebhook operations, string id)
            {
                return operations.GetSubscriptionAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a Subscription to Webhooks
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetSubscriptionAsync(this IWebhook operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSubscriptionWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a Subscription to Webhooks
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<object> GetSubscriptionWithHttpMessages(this IWebhook operations, string id, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.GetSubscriptionWithHttpMessagesAsync(id, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Unsubscribes from Webhooks
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static ProblemDetails Unsubscribe(this IWebhook operations, string id)
            {
                return operations.UnsubscribeAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Unsubscribes from Webhooks
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProblemDetails> UnsubscribeAsync(this IWebhook operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UnsubscribeWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Unsubscribes from Webhooks
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<ProblemDetails> UnsubscribeWithHttpMessages(this IWebhook operations, string id, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.UnsubscribeWithHttpMessagesAsync(id, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sets the Subscription Status
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='body'>
            /// </param>
            public static object SetStatus(this IWebhook operations, string id, WebhookSubscriptionStatusUpdate body = default(WebhookSubscriptionStatusUpdate))
            {
                return operations.SetStatusAsync(id, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sets the Subscription Status
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> SetStatusAsync(this IWebhook operations, string id, WebhookSubscriptionStatusUpdate body = default(WebhookSubscriptionStatusUpdate), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetStatusWithHttpMessagesAsync(id, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Sets the Subscription Status
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<object> SetStatusWithHttpMessages(this IWebhook operations, string id, WebhookSubscriptionStatusUpdate body = default(WebhookSubscriptionStatusUpdate), Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.SetStatusWithHttpMessagesAsync(id, body, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

    }
}
