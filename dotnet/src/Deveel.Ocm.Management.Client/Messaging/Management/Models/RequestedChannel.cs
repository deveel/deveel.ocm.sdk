// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Deveel.Messaging.Management.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// A configured channel that was requested for assignment
    /// </summary>
    public partial class RequestedChannel
    {
        /// <summary>
        /// Initializes a new instance of the RequestedChannel class.
        /// </summary>
        public RequestedChannel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RequestedChannel class.
        /// </summary>
        /// <param name="sourceId">The identifier of the source channel from
        /// the inventory</param>
        /// <param name="name">The custom name of the channel</param>
        /// <param name="directions">Possible values include: 'default', 'out',
        /// 'in', 'duplex'</param>
        /// <param name="contentTypes">The type of message contents to be
        /// allowed by the channel</param>
        /// <param name="quotas">A set of usage quotas requested for
        /// assignment</param>
        /// <param name="context">A context that is appended to the messages
        /// sent or received
        /// through the channel.</param>
        /// <param name="type">Possible values include: 'sms', 'messenger',
        /// 'whatsapp', 'email', 'viber', 'rcs', 'push', 'telegram',
        /// 'sandbox'</param>
        /// <param name="settings">Additional custom settings to be
        /// configured</param>
        /// <param name="terminals">An optional set of terminals to be
        /// initially associated to the channel
        /// (further ones can be added later, if the channel will be
        /// assigned).</param>
        public RequestedChannel(string sourceId, string name, ChannelDirections directions, IList<string> contentTypes, IList<ChannelQuota> quotas = default(IList<ChannelQuota>), IDictionary<string, object> context = default(IDictionary<string, object>), ChannelType? type = default(ChannelType?), IDictionary<string, object> settings = default(IDictionary<string, object>), IList<ChannelTerminal> terminals = default(IList<ChannelTerminal>))
        {
            SourceId = sourceId;
            Quotas = quotas;
            Context = context;
            Name = name;
            Type = type;
            Directions = directions;
            ContentTypes = contentTypes;
            Settings = settings;
            Terminals = terminals;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the identifier of the source channel from the
        /// inventory
        /// </summary>
        [JsonProperty(PropertyName = "sourceId")]
        public string SourceId { get; set; }

        /// <summary>
        /// Gets or sets a set of usage quotas requested for assignment
        /// </summary>
        [JsonProperty(PropertyName = "quotas")]
        public IList<ChannelQuota> Quotas { get; set; }

        /// <summary>
        /// Gets or sets a context that is appended to the messages sent or
        /// received
        /// through the channel.
        /// </summary>
        [JsonProperty(PropertyName = "context")]
        public IDictionary<string, object> Context { get; set; }

        /// <summary>
        /// Gets or sets the custom name of the channel
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'sms', 'messenger',
        /// 'whatsapp', 'email', 'viber', 'rcs', 'push', 'telegram', 'sandbox'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public ChannelType? Type { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'default', 'out', 'in',
        /// 'duplex'
        /// </summary>
        [JsonProperty(PropertyName = "directions")]
        public ChannelDirections Directions { get; set; }

        /// <summary>
        /// Gets or sets the type of message contents to be allowed by the
        /// channel
        /// </summary>
        [JsonProperty(PropertyName = "contentTypes")]
        public IList<string> ContentTypes { get; set; }

        /// <summary>
        /// Gets or sets additional custom settings to be configured
        /// </summary>
        [JsonProperty(PropertyName = "settings")]
        public IDictionary<string, object> Settings { get; set; }

        /// <summary>
        /// Gets or sets an optional set of terminals to be initially
        /// associated to the channel
        /// (further ones can be added later, if the channel will be assigned).
        /// </summary>
        [JsonProperty(PropertyName = "terminals")]
        public IList<ChannelTerminal> Terminals { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (SourceId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SourceId");
            }
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (ContentTypes == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ContentTypes");
            }
            if (Quotas != null)
            {
                foreach (var element in Quotas)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (Terminals != null)
            {
                foreach (var element1 in Terminals)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
        }
    }
}
