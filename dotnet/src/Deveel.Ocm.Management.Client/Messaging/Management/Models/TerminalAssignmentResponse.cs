// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Deveel.Messaging.Management.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class TerminalAssignmentResponse
    {
        /// <summary>
        /// Initializes a new instance of the TerminalAssignmentResponse class.
        /// </summary>
        public TerminalAssignmentResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TerminalAssignmentResponse class.
        /// </summary>
        /// <param name="responseType">Possible values include: 'none',
        /// 'accepted', 'rejected'</param>
        public TerminalAssignmentResponse(string responder, ResourceAssignmentResponseType responseType, System.DateTimeOffset timeStamp, string notes = default(string))
        {
            Responder = responder;
            ResponseType = responseType;
            TimeStamp = timeStamp;
            Notes = notes;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "responder")]
        public string Responder { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'none', 'accepted',
        /// 'rejected'
        /// </summary>
        [JsonProperty(PropertyName = "responseType")]
        public ResourceAssignmentResponseType ResponseType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "timeStamp")]
        public System.DateTimeOffset TimeStamp { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "notes")]
        public string Notes { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Responder == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Responder");
            }
        }
    }
}
