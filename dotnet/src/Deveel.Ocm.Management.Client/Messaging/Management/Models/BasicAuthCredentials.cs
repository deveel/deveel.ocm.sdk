// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Deveel.Messaging.Management.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The specification of a Basic authentication used to
    /// secure the connection of a channel
    /// </summary>
    public partial class BasicAuthCredentials
    {
        /// <summary>
        /// Initializes a new instance of the BasicAuthCredentials class.
        /// </summary>
        public BasicAuthCredentials()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the BasicAuthCredentials class.
        /// </summary>
        /// <param name="userName">The name of the user of the
        /// credentials</param>
        /// <param name="password">The secret password of the
        /// credentials</param>
        public BasicAuthCredentials(string userName, string password)
        {
            UserName = userName;
            Password = password;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the name of the user of the credentials
        /// </summary>
        [JsonProperty(PropertyName = "userName")]
        public string UserName { get; set; }

        /// <summary>
        /// Gets or sets the secret password of the credentials
        /// </summary>
        [JsonProperty(PropertyName = "password")]
        public string Password { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (UserName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "UserName");
            }
            if (Password == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Password");
            }
        }
    }
}
