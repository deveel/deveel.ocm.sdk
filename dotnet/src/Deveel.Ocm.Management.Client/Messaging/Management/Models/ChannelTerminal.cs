// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Deveel.Messaging.Management.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// A server terminal that is bound to a specific
    /// channel instance
    /// </summary>
    public partial class ChannelTerminal
    {
        /// <summary>
        /// Initializes a new instance of the ChannelTerminal class.
        /// </summary>
        public ChannelTerminal()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ChannelTerminal class.
        /// </summary>
        /// <param name="id">The unique identifier of the terminal
        /// instance</param>
        /// <param name="type">Possible values include: 'phoneNumber', 'email',
        /// 'alphaNumeric', 'conversation', 'postalAddress', 'user', 'app',
        /// 'url'</param>
        /// <param name="address">The address of the terminal</param>
        public ChannelTerminal(string id, TerminalType type, string address)
        {
            Id = id;
            Type = type;
            Address = address;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the unique identifier of the terminal instance
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'phoneNumber', 'email',
        /// 'alphaNumeric', 'conversation', 'postalAddress', 'user', 'app',
        /// 'url'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public TerminalType Type { get; set; }

        /// <summary>
        /// Gets or sets the address of the terminal
        /// </summary>
        [JsonProperty(PropertyName = "address")]
        public string Address { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Id == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Id");
            }
            if (Address == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Address");
            }
        }
    }
}
