// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Deveel.Messaging.Management.Models
{
    using Newtonsoft.Json;

    /// <summary>
    /// Defines values for GrantType.
    /// </summary>
    /// <summary>
    /// Determine base value for a given allowed value if exists, else return
    /// the value itself
    /// </summary>
    [JsonConverter(typeof(GrantTypeConverter))]
    public struct GrantType : System.IEquatable<GrantType>
    {
        private GrantType(string underlyingValue)
        {
            UnderlyingValue=underlyingValue;
        }

        public static readonly GrantType ClientCredentials = "client_credentials";

        public static readonly GrantType AuthorizationCode = "authorization_code";

        public static readonly GrantType ApiKey = "apiKey";


        /// <summary>
        /// Underlying value of enum GrantType
        /// </summary>
        private readonly string UnderlyingValue;

        /// <summary>
        /// Returns string representation for GrantType
        /// </summary>
        public override string ToString()
        {
            return UnderlyingValue == null ? null : UnderlyingValue.ToString();
        }

        /// <summary>
        /// Compares enums of type GrantType
        /// </summary>
        public bool Equals(GrantType e)
        {
            return UnderlyingValue.Equals(e.UnderlyingValue);
        }

        /// <summary>
        /// Implicit operator to convert string to GrantType
        /// </summary>
        public static implicit operator GrantType(string value)
        {
            return new GrantType(value);
        }

        /// <summary>
        /// Implicit operator to convert GrantType to string
        /// </summary>
        public static implicit operator string(GrantType e)
        {
            return e.UnderlyingValue;
        }

        /// <summary>
        /// Overriding == operator for enum GrantType
        /// </summary>
        public static bool operator == (GrantType e1, GrantType e2)
        {
            return e2.Equals(e1);
        }

        /// <summary>
        /// Overriding != operator for enum GrantType
        /// </summary>
        public static bool operator != (GrantType e1, GrantType e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>
        /// Overrides Equals operator for GrantType
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is GrantType && Equals((GrantType)obj);
        }

        /// <summary>
        /// Returns for hashCode GrantType
        /// </summary>
        public override int GetHashCode()
        {
            return UnderlyingValue.GetHashCode();
        }

    }
}
