// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Deveel.Messaging.Management.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class NewClient
    {
        /// <summary>
        /// Initializes a new instance of the NewClient class.
        /// </summary>
        public NewClient()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the NewClient class.
        /// </summary>
        public NewClient(string name, IList<GrantType?> grantTypes, IDictionary<string, object> properties = default(IDictionary<string, object>), string consentType = default(string))
        {
            Name = name;
            GrantTypes = grantTypes;
            Properties = properties;
            ConsentType = consentType;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "grantTypes")]
        public IList<GrantType?> GrantTypes { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties")]
        public IDictionary<string, object> Properties { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "consentType")]
        public string ConsentType { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (GrantTypes == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "GrantTypes");
            }
        }
    }
}
