// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Deveel.Messaging.Management.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The request of creation of a new user of the platform
    /// </summary>
    public partial class NewUser
    {
        /// <summary>
        /// Initializes a new instance of the NewUser class.
        /// </summary>
        public NewUser()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the NewUser class.
        /// </summary>
        /// <param name="email">The e-mail address that identifies the user and
        /// that is used
        /// for communications</param>
        /// <param name="name">A unique name of the user (optional)</param>
        /// <param name="firstName">The first name of the person
        /// (optional)</param>
        /// <param name="lastName">The family name of the person
        /// (optional)</param>
        /// <param name="phone">A phone number used to reach the user</param>
        /// <param name="picture">The link to a profile picture of the
        /// user</param>
        /// <param name="metadata">Additional metadata of the user</param>
        /// <param name="active">Whether to set the user active since its
        /// creation</param>
        /// <param name="roles">An optional list of roles to be assigned to the
        /// user</param>
        /// <param name="scopes">An optional list of scopes to be assigned to
        /// the user</param>
        /// <param name="password">A password used to authenticate the user (if
        /// not provided, it is auto-generated)</param>
        public NewUser(string email, string name = default(string), string firstName = default(string), string lastName = default(string), string phone = default(string), string picture = default(string), IDictionary<string, object> metadata = default(IDictionary<string, object>), bool? active = default(bool?), IList<string> roles = default(IList<string>), IList<string> scopes = default(IList<string>), string password = default(string))
        {
            Name = name;
            FirstName = firstName;
            LastName = lastName;
            Email = email;
            Phone = phone;
            Picture = picture;
            Metadata = metadata;
            Active = active;
            Roles = roles;
            Scopes = scopes;
            Password = password;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets a unique name of the user (optional)
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the first name of the person (optional)
        /// </summary>
        [JsonProperty(PropertyName = "firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or sets the family name of the person (optional)
        /// </summary>
        [JsonProperty(PropertyName = "lastName")]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or sets the e-mail address that identifies the user and that
        /// is used
        /// for communications
        /// </summary>
        [JsonProperty(PropertyName = "email")]
        public string Email { get; set; }

        /// <summary>
        /// Gets or sets a phone number used to reach the user
        /// </summary>
        [JsonProperty(PropertyName = "phone")]
        public string Phone { get; set; }

        /// <summary>
        /// Gets or sets the link to a profile picture of the user
        /// </summary>
        [JsonProperty(PropertyName = "picture")]
        public string Picture { get; set; }

        /// <summary>
        /// Gets or sets additional metadata of the user
        /// </summary>
        [JsonProperty(PropertyName = "metadata")]
        public IDictionary<string, object> Metadata { get; set; }

        /// <summary>
        /// Gets or sets whether to set the user active since its creation
        /// </summary>
        [JsonProperty(PropertyName = "active")]
        public bool? Active { get; set; }

        /// <summary>
        /// Gets or sets an optional list of roles to be assigned to the user
        /// </summary>
        [JsonProperty(PropertyName = "roles")]
        public IList<string> Roles { get; set; }

        /// <summary>
        /// Gets or sets an optional list of scopes to be assigned to the user
        /// </summary>
        [JsonProperty(PropertyName = "scopes")]
        public IList<string> Scopes { get; set; }

        /// <summary>
        /// Gets or sets a password used to authenticate the user (if not
        /// provided, it is auto-generated)
        /// </summary>
        [JsonProperty(PropertyName = "password")]
        public string Password { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Email == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Email");
            }
        }
    }
}
