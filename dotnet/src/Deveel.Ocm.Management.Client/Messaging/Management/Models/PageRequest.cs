// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Deveel.Messaging.Management.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class PageRequest
    {
        /// <summary>
        /// Initializes a new instance of the PageRequest class.
        /// </summary>
        public PageRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PageRequest class.
        /// </summary>
        public PageRequest(int page, int size, IList<PageSort> sortBy = default(IList<PageSort>), IList<Filter> filters = default(IList<Filter>))
        {
            Page = page;
            Size = size;
            SortBy = sortBy;
            Filters = filters;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "page")]
        public int Page { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "size")]
        public int Size { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sortBy")]
        public IList<PageSort> SortBy { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "filters")]
        public IList<Filter> Filters { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (SortBy != null)
            {
                foreach (var element in SortBy)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (Filters != null)
            {
                foreach (var element1 in Filters)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
        }
    }
}
