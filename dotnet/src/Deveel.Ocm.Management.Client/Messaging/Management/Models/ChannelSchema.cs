// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Deveel.Messaging.Management.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The schema of a channel type and provider
    /// </summary>
    public partial class ChannelSchema
    {
        /// <summary>
        /// Initializes a new instance of the ChannelSchema class.
        /// </summary>
        public ChannelSchema()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ChannelSchema class.
        /// </summary>
        /// <param name="provider">Possible values include: 'other', 'twilio',
        /// 'sendgrid', 'sendinblue', 'facebook', 'deveel', 'linkmobility',
        /// 'mailjet', 'telegram'</param>
        /// <param name="type">Possible values include: 'sms', 'messenger',
        /// 'whatsapp', 'email', 'viber', 'rcs', 'push', 'telegram',
        /// 'sandbox'</param>
        /// <param name="directions">Possible values include: 'default', 'out',
        /// 'in', 'duplex'</param>
        /// <param name="credentialTypes">The type of credentials required by
        /// the channel</param>
        /// <param name="receiverTypes">The types of receiving terminals
        /// supported by the channel</param>
        /// <param name="senderTypes">The types of sender terminals supported
        /// by the channel</param>
        /// <param name="contentTypes">The types of message content supported
        /// by the channel</param>
        /// <param name="settings">The additional settings supported by the
        /// channel</param>
        public ChannelSchema(ChannelProvider provider, ChannelType type, ChannelDirections directions, IList<ChannelCredentialType?> credentialTypes, IList<TerminalType?> receiverTypes, IList<TerminalType?> senderTypes, IList<MessageContentType?> contentTypes, IList<string> settings = default(IList<string>))
        {
            Provider = provider;
            Type = type;
            Directions = directions;
            CredentialTypes = credentialTypes;
            ReceiverTypes = receiverTypes;
            SenderTypes = senderTypes;
            ContentTypes = contentTypes;
            Settings = settings;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets possible values include: 'other', 'twilio',
        /// 'sendgrid', 'sendinblue', 'facebook', 'deveel', 'linkmobility',
        /// 'mailjet', 'telegram'
        /// </summary>
        [JsonProperty(PropertyName = "provider")]
        public ChannelProvider Provider { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'sms', 'messenger',
        /// 'whatsapp', 'email', 'viber', 'rcs', 'push', 'telegram', 'sandbox'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public ChannelType Type { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'default', 'out', 'in',
        /// 'duplex'
        /// </summary>
        [JsonProperty(PropertyName = "directions")]
        public ChannelDirections Directions { get; set; }

        /// <summary>
        /// Gets or sets the type of credentials required by the channel
        /// </summary>
        [JsonProperty(PropertyName = "credentialTypes")]
        public IList<ChannelCredentialType?> CredentialTypes { get; set; }

        /// <summary>
        /// Gets or sets the types of receiving terminals supported by the
        /// channel
        /// </summary>
        [JsonProperty(PropertyName = "receiverTypes")]
        public IList<TerminalType?> ReceiverTypes { get; set; }

        /// <summary>
        /// Gets or sets the types of sender terminals supported by the channel
        /// </summary>
        [JsonProperty(PropertyName = "senderTypes")]
        public IList<TerminalType?> SenderTypes { get; set; }

        /// <summary>
        /// Gets or sets the types of message content supported by the channel
        /// </summary>
        [JsonProperty(PropertyName = "contentTypes")]
        public IList<MessageContentType?> ContentTypes { get; set; }

        /// <summary>
        /// Gets or sets the additional settings supported by the channel
        /// </summary>
        [JsonProperty(PropertyName = "settings")]
        public IList<string> Settings { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (CredentialTypes == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "CredentialTypes");
            }
            if (ReceiverTypes == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ReceiverTypes");
            }
            if (SenderTypes == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SenderTypes");
            }
            if (ContentTypes == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ContentTypes");
            }
        }
    }
}
