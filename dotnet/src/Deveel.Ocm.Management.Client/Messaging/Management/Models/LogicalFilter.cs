// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Deveel.Messaging.Management.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class LogicalFilter
    {
        /// <summary>
        /// Initializes a new instance of the LogicalFilter class.
        /// </summary>
        public LogicalFilter()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the LogicalFilter class.
        /// </summary>
        /// <param name="op">Possible values include: 'and', 'or'</param>
        public LogicalFilter(LogicalOperator op, IList<Filter> filters)
        {
            Op = op;
            Filters = filters;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets possible values include: 'and', 'or'
        /// </summary>
        [JsonProperty(PropertyName = "op")]
        public LogicalOperator Op { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "filters")]
        public IList<Filter> Filters { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Filters == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Filters");
            }
            if (Filters != null)
            {
                foreach (var element in Filters)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
