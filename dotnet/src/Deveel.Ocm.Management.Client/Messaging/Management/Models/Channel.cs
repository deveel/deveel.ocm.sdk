// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Deveel.Messaging.Management.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class Channel
    {
        /// <summary>
        /// Initializes a new instance of the Channel class.
        /// </summary>
        public Channel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Channel class.
        /// </summary>
        /// <param name="type">Possible values include: 'sms', 'messenger',
        /// 'whatsapp', 'email', 'viber', 'rcs', 'push', 'telegram',
        /// 'sandbox'</param>
        /// <param name="directions">Possible values include: 'default', 'out',
        /// 'in', 'duplex'</param>
        public Channel(string name, ChannelType type, ChannelDirections directions, IList<string> contentTypes, string id, IList<ChannelTerminal> terminals = default(IList<ChannelTerminal>))
        {
            Name = name;
            Type = type;
            Directions = directions;
            ContentTypes = contentTypes;
            Terminals = terminals;
            Id = id;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'sms', 'messenger',
        /// 'whatsapp', 'email', 'viber', 'rcs', 'push', 'telegram', 'sandbox'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public ChannelType Type { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'default', 'out', 'in',
        /// 'duplex'
        /// </summary>
        [JsonProperty(PropertyName = "directions")]
        public ChannelDirections Directions { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "contentTypes")]
        public IList<string> ContentTypes { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "terminals")]
        public IList<ChannelTerminal> Terminals { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (ContentTypes == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ContentTypes");
            }
            if (Id == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Id");
            }
            if (Terminals != null)
            {
                foreach (var element in Terminals)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
