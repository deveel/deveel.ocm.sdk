// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Deveel.Messaging.Management.Models
{
    using Newtonsoft.Json;

    /// <summary>
    /// Defines values for TerminalType.
    /// </summary>
    /// <summary>
    /// Determine base value for a given allowed value if exists, else return
    /// the value itself
    /// </summary>
    [JsonConverter(typeof(TerminalTypeConverter))]
    public struct TerminalType : System.IEquatable<TerminalType>
    {
        private TerminalType(string underlyingValue)
        {
            UnderlyingValue=underlyingValue;
        }

        public static readonly TerminalType PhoneNumber = "phoneNumber";

        public static readonly TerminalType Email = "email";

        public static readonly TerminalType AlphaNumeric = "alphaNumeric";

        public static readonly TerminalType Conversation = "conversation";

        public static readonly TerminalType PostalAddress = "postalAddress";

        public static readonly TerminalType User = "user";

        public static readonly TerminalType App = "app";

        public static readonly TerminalType Url = "url";


        /// <summary>
        /// Underlying value of enum TerminalType
        /// </summary>
        private readonly string UnderlyingValue;

        /// <summary>
        /// Returns string representation for TerminalType
        /// </summary>
        public override string ToString()
        {
            return UnderlyingValue == null ? null : UnderlyingValue.ToString();
        }

        /// <summary>
        /// Compares enums of type TerminalType
        /// </summary>
        public bool Equals(TerminalType e)
        {
            return UnderlyingValue.Equals(e.UnderlyingValue);
        }

        /// <summary>
        /// Implicit operator to convert string to TerminalType
        /// </summary>
        public static implicit operator TerminalType(string value)
        {
            return new TerminalType(value);
        }

        /// <summary>
        /// Implicit operator to convert TerminalType to string
        /// </summary>
        public static implicit operator string(TerminalType e)
        {
            return e.UnderlyingValue;
        }

        /// <summary>
        /// Overriding == operator for enum TerminalType
        /// </summary>
        public static bool operator == (TerminalType e1, TerminalType e2)
        {
            return e2.Equals(e1);
        }

        /// <summary>
        /// Overriding != operator for enum TerminalType
        /// </summary>
        public static bool operator != (TerminalType e1, TerminalType e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>
        /// Overrides Equals operator for TerminalType
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is TerminalType && Equals((TerminalType)obj);
        }

        /// <summary>
        /// Returns for hashCode TerminalType
        /// </summary>
        public override int GetHashCode()
        {
            return UnderlyingValue.GetHashCode();
        }

    }
}
