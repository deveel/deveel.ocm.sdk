// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Deveel.Messaging.Management.Models
{
    using Newtonsoft.Json;

    /// <summary>
    /// Defines values for ChannelCredentialType.
    /// </summary>
    /// <summary>
    /// Determine base value for a given allowed value if exists, else return
    /// the value itself
    /// </summary>
    [JsonConverter(typeof(ChannelCredentialTypeConverter))]
    public struct ChannelCredentialType : System.IEquatable<ChannelCredentialType>
    {
        private ChannelCredentialType(string underlyingValue)
        {
            UnderlyingValue=underlyingValue;
        }

        public static readonly ChannelCredentialType Unknown = "unknown";

        public static readonly ChannelCredentialType ApiKey = "apiKey";

        public static readonly ChannelCredentialType BasicAuth = "basicAuth";

        public static readonly ChannelCredentialType OAuth = "oAuth";


        /// <summary>
        /// Underlying value of enum ChannelCredentialType
        /// </summary>
        private readonly string UnderlyingValue;

        /// <summary>
        /// Returns string representation for ChannelCredentialType
        /// </summary>
        public override string ToString()
        {
            return UnderlyingValue == null ? null : UnderlyingValue.ToString();
        }

        /// <summary>
        /// Compares enums of type ChannelCredentialType
        /// </summary>
        public bool Equals(ChannelCredentialType e)
        {
            return UnderlyingValue.Equals(e.UnderlyingValue);
        }

        /// <summary>
        /// Implicit operator to convert string to ChannelCredentialType
        /// </summary>
        public static implicit operator ChannelCredentialType(string value)
        {
            return new ChannelCredentialType(value);
        }

        /// <summary>
        /// Implicit operator to convert ChannelCredentialType to string
        /// </summary>
        public static implicit operator string(ChannelCredentialType e)
        {
            return e.UnderlyingValue;
        }

        /// <summary>
        /// Overriding == operator for enum ChannelCredentialType
        /// </summary>
        public static bool operator == (ChannelCredentialType e1, ChannelCredentialType e2)
        {
            return e2.Equals(e1);
        }

        /// <summary>
        /// Overriding != operator for enum ChannelCredentialType
        /// </summary>
        public static bool operator != (ChannelCredentialType e1, ChannelCredentialType e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>
        /// Overrides Equals operator for ChannelCredentialType
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is ChannelCredentialType && Equals((ChannelCredentialType)obj);
        }

        /// <summary>
        /// Returns for hashCode ChannelCredentialType
        /// </summary>
        public override int GetHashCode()
        {
            return UnderlyingValue.GetHashCode();
        }

    }
}
