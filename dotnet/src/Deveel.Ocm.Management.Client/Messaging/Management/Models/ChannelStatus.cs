// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Deveel.Messaging.Management.Models
{
    using Newtonsoft.Json;

    /// <summary>
    /// Defines values for ChannelStatus.
    /// </summary>
    /// <summary>
    /// Determine base value for a given allowed value if exists, else return
    /// the value itself
    /// </summary>
    [JsonConverter(typeof(ChannelStatusConverter))]
    public struct ChannelStatus : System.IEquatable<ChannelStatus>
    {
        private ChannelStatus(string underlyingValue)
        {
            UnderlyingValue=underlyingValue;
        }

        public static readonly ChannelStatus None = "none";

        public static readonly ChannelStatus Requested = "requested";

        public static readonly ChannelStatus Active = "active";

        public static readonly ChannelStatus Suspended = "suspended";

        public static readonly ChannelStatus Denied = "denied";


        /// <summary>
        /// Underlying value of enum ChannelStatus
        /// </summary>
        private readonly string UnderlyingValue;

        /// <summary>
        /// Returns string representation for ChannelStatus
        /// </summary>
        public override string ToString()
        {
            return UnderlyingValue == null ? null : UnderlyingValue.ToString();
        }

        /// <summary>
        /// Compares enums of type ChannelStatus
        /// </summary>
        public bool Equals(ChannelStatus e)
        {
            return UnderlyingValue.Equals(e.UnderlyingValue);
        }

        /// <summary>
        /// Implicit operator to convert string to ChannelStatus
        /// </summary>
        public static implicit operator ChannelStatus(string value)
        {
            return new ChannelStatus(value);
        }

        /// <summary>
        /// Implicit operator to convert ChannelStatus to string
        /// </summary>
        public static implicit operator string(ChannelStatus e)
        {
            return e.UnderlyingValue;
        }

        /// <summary>
        /// Overriding == operator for enum ChannelStatus
        /// </summary>
        public static bool operator == (ChannelStatus e1, ChannelStatus e2)
        {
            return e2.Equals(e1);
        }

        /// <summary>
        /// Overriding != operator for enum ChannelStatus
        /// </summary>
        public static bool operator != (ChannelStatus e1, ChannelStatus e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>
        /// Overrides Equals operator for ChannelStatus
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is ChannelStatus && Equals((ChannelStatus)obj);
        }

        /// <summary>
        /// Returns for hashCode ChannelStatus
        /// </summary>
        public override int GetHashCode()
        {
            return UnderlyingValue.GetHashCode();
        }

    }
}
