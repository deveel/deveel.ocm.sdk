// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Deveel.Messaging.Management.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The instance of a channel owned by a customer
    /// </summary>
    public partial class UserChannel
    {
        /// <summary>
        /// Initializes a new instance of the UserChannel class.
        /// </summary>
        public UserChannel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the UserChannel class.
        /// </summary>
        /// <param name="status">Possible values include: 'none', 'requested',
        /// 'active', 'suspended', 'denied'</param>
        /// <param name="name">The name of the channel instance</param>
        /// <param name="type">Possible values include: 'sms', 'messenger',
        /// 'whatsapp', 'email', 'viber', 'rcs', 'push', 'telegram',
        /// 'sandbox'</param>
        /// <param name="provider">The provider of messaging services used by
        /// the channel instance</param>
        /// <param name="contentTypes">A list of message content types that are
        /// supported
        /// by the channel (either because of configuration or because
        /// of native capabilities of the channel)</param>
        /// <param name="lastChanged">The exact time-stamp of the last change
        /// to the
        /// settings and states of the channel</param>
        /// <param name="tenantId">The identifier of the tenant of the
        /// cannel</param>
        /// <param name="directions">Possible values include: 'default', 'out',
        /// 'in', 'duplex'</param>
        /// <param name="source">Possible values include: 'unknown',
        /// 'inventory', 'customer'</param>
        /// <param name="sourceId">If the channel is originated from the
        /// inventory, this
        /// is the identifier of the original channel</param>
        /// <param name="settings">A collection of settings of the channel
        /// instance (Note: the
        /// types of settings depend on the type of channel)</param>
        /// <param name="id">The unique identifier of the channel
        /// instance</param>
        /// <param name="quotas">A list of provisioned messaging quotas
        /// (limits)
        /// to the usage of the channel instance</param>
        /// <param name="terminals">A list of server terminals associated with
        /// the channel, that
        /// can send or receive messages (accordingly to their assigned
        /// role)</param>
        /// <param name="context">A context that is appended to the messages
        /// sent or received
        /// through the channel.</param>
        public UserChannel(ChannelStatus status, string name, ChannelType type, string provider, IList<MessageContentType?> contentTypes, System.DateTimeOffset? lastChanged = default(System.DateTimeOffset?), string tenantId = default(string), ChannelDirections? directions = default(ChannelDirections?), ChannelSource? source = default(ChannelSource?), string sourceId = default(string), IDictionary<string, object> settings = default(IDictionary<string, object>), string id = default(string), IList<ChannelQuota> quotas = default(IList<ChannelQuota>), IList<ChannelTerminal> terminals = default(IList<ChannelTerminal>), IDictionary<string, object> context = default(IDictionary<string, object>))
        {
            Status = status;
            LastChanged = lastChanged;
            Name = name;
            TenantId = tenantId;
            Type = type;
            Provider = provider;
            Directions = directions;
            Source = source;
            SourceId = sourceId;
            Settings = settings;
            Id = id;
            ContentTypes = contentTypes;
            Quotas = quotas;
            Terminals = terminals;
            Context = context;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets possible values include: 'none', 'requested',
        /// 'active', 'suspended', 'denied'
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public ChannelStatus Status { get; set; }

        /// <summary>
        /// Gets or sets the exact time-stamp of the last change to the
        /// settings and states of the channel
        /// </summary>
        [JsonProperty(PropertyName = "lastChanged")]
        public System.DateTimeOffset? LastChanged { get; set; }

        /// <summary>
        /// Gets or sets the name of the channel instance
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the identifier of the tenant of the cannel
        /// </summary>
        [JsonProperty(PropertyName = "tenantId")]
        public string TenantId { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'sms', 'messenger',
        /// 'whatsapp', 'email', 'viber', 'rcs', 'push', 'telegram', 'sandbox'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public ChannelType Type { get; set; }

        /// <summary>
        /// Gets or sets the provider of messaging services used by
        /// the channel instance
        /// </summary>
        [JsonProperty(PropertyName = "provider")]
        public string Provider { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'default', 'out', 'in',
        /// 'duplex'
        /// </summary>
        [JsonProperty(PropertyName = "directions")]
        public ChannelDirections? Directions { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'unknown', 'inventory',
        /// 'customer'
        /// </summary>
        [JsonProperty(PropertyName = "source")]
        public ChannelSource? Source { get; set; }

        /// <summary>
        /// Gets or sets if the channel is originated from the inventory, this
        /// is the identifier of the original channel
        /// </summary>
        [JsonProperty(PropertyName = "sourceId")]
        public string SourceId { get; set; }

        /// <summary>
        /// Gets or sets a collection of settings of the channel instance
        /// (Note: the
        /// types of settings depend on the type of channel)
        /// </summary>
        [JsonProperty(PropertyName = "settings")]
        public IDictionary<string, object> Settings { get; set; }

        /// <summary>
        /// Gets or sets the unique identifier of the channel instance
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets a list of message content types that are supported
        /// by the channel (either because of configuration or because
        /// of native capabilities of the channel)
        /// </summary>
        [JsonProperty(PropertyName = "contentTypes")]
        public IList<MessageContentType?> ContentTypes { get; set; }

        /// <summary>
        /// Gets or sets a list of provisioned messaging quotas (limits)
        /// to the usage of the channel instance
        /// </summary>
        [JsonProperty(PropertyName = "quotas")]
        public IList<ChannelQuota> Quotas { get; set; }

        /// <summary>
        /// Gets or sets a list of server terminals associated with the
        /// channel, that
        /// can send or receive messages (accordingly to their assigned role)
        /// </summary>
        [JsonProperty(PropertyName = "terminals")]
        public IList<ChannelTerminal> Terminals { get; set; }

        /// <summary>
        /// Gets or sets a context that is appended to the messages sent or
        /// received
        /// through the channel.
        /// </summary>
        [JsonProperty(PropertyName = "context")]
        public IDictionary<string, object> Context { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Provider == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Provider");
            }
            if (ContentTypes == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ContentTypes");
            }
            if (Quotas != null)
            {
                foreach (var element in Quotas)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (Terminals != null)
            {
                foreach (var element1 in Terminals)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
        }
    }
}
