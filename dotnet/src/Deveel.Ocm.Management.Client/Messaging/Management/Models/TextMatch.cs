// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Deveel.Messaging.Management.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class TextMatch
    {
        /// <summary>
        /// Initializes a new instance of the TextMatch class.
        /// </summary>
        public TextMatch()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TextMatch class.
        /// </summary>
        /// <param name="field">Possible values include: 'subject', 'body',
        /// 'context'</param>
        /// <param name="operatorProperty">Possible values include:
        /// 'startsWith', 'endsWith', 'contains', 'notContains'</param>
        public TextMatch(MessageField field, string value, TextMatchOperator? operatorProperty = default(TextMatchOperator?))
        {
            Field = field;
            OperatorProperty = operatorProperty;
            Value = value;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets possible values include: 'subject', 'body', 'context'
        /// </summary>
        [JsonProperty(PropertyName = "field")]
        public MessageField Field { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'startsWith', 'endsWith',
        /// 'contains', 'notContains'
        /// </summary>
        [JsonProperty(PropertyName = "operator")]
        public TextMatchOperator? OperatorProperty { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "value")]
        public string Value { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Value == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Value");
            }
        }
    }
}
