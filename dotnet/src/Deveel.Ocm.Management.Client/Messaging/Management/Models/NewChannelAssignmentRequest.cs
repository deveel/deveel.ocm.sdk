// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Deveel.Messaging.Management.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// A new assignment request of a channel from the inventory
    /// </summary>
    public partial class NewChannelAssignmentRequest
    {
        /// <summary>
        /// Initializes a new instance of the NewChannelAssignmentRequest
        /// class.
        /// </summary>
        public NewChannelAssignmentRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the NewChannelAssignmentRequest
        /// class.
        /// </summary>
        /// <param name="name">The name of the channel instance</param>
        /// <param name="channelId">The identifier of the source channel from
        /// the inventory</param>
        /// <param name="directions">Possible values include: 'default', 'out',
        /// 'in', 'duplex'</param>
        /// <param name="contentTypes">The types of content allowed by the
        /// channel (if not set
        /// the channel will be assigned all the allowed content types
        /// from the source channel)</param>
        /// <param name="settings">The settings specific for the channel
        /// instance, integrating
        /// or overriding the settings from the source channel</param>
        /// <param name="terminals">The list of terminals to be bound to the
        /// channel</param>
        /// <param name="quotas">The usage quotas assigned to the
        /// channel</param>
        /// <param name="context">A context that is appended to the messages
        /// sent or received
        /// through the channel</param>
        public NewChannelAssignmentRequest(string name, string channelId, ChannelDirections? directions = default(ChannelDirections?), IList<MessageContentType?> contentTypes = default(IList<MessageContentType?>), IDictionary<string, object> settings = default(IDictionary<string, object>), IList<NewChannelTerminal> terminals = default(IList<NewChannelTerminal>), IList<ChannelQuota> quotas = default(IList<ChannelQuota>), IDictionary<string, object> context = default(IDictionary<string, object>))
        {
            Name = name;
            Directions = directions;
            ContentTypes = contentTypes;
            Settings = settings;
            Terminals = terminals;
            ChannelId = channelId;
            Quotas = quotas;
            Context = context;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the name of the channel instance
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'default', 'out', 'in',
        /// 'duplex'
        /// </summary>
        [JsonProperty(PropertyName = "directions")]
        public ChannelDirections? Directions { get; set; }

        /// <summary>
        /// Gets or sets the types of content allowed by the channel (if not
        /// set
        /// the channel will be assigned all the allowed content types
        /// from the source channel)
        /// </summary>
        [JsonProperty(PropertyName = "contentTypes")]
        public IList<MessageContentType?> ContentTypes { get; set; }

        /// <summary>
        /// Gets or sets the settings specific for the channel instance,
        /// integrating
        /// or overriding the settings from the source channel
        /// </summary>
        [JsonProperty(PropertyName = "settings")]
        public IDictionary<string, object> Settings { get; set; }

        /// <summary>
        /// Gets or sets the list of terminals to be bound to the channel
        /// </summary>
        [JsonProperty(PropertyName = "terminals")]
        public IList<NewChannelTerminal> Terminals { get; set; }

        /// <summary>
        /// Gets or sets the identifier of the source channel from the
        /// inventory
        /// </summary>
        [JsonProperty(PropertyName = "channelId")]
        public string ChannelId { get; set; }

        /// <summary>
        /// Gets or sets the usage quotas assigned to the channel
        /// </summary>
        [JsonProperty(PropertyName = "quotas")]
        public IList<ChannelQuota> Quotas { get; set; }

        /// <summary>
        /// Gets or sets a context that is appended to the messages sent or
        /// received
        /// through the channel
        /// </summary>
        [JsonProperty(PropertyName = "context")]
        public IDictionary<string, object> Context { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (ChannelId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ChannelId");
            }
            if (Quotas != null)
            {
                foreach (var element in Quotas)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
