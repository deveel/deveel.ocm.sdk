// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Deveel.Messaging.Management.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class Filter
    {
        /// <summary>
        /// Initializes a new instance of the Filter class.
        /// </summary>
        public Filter()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Filter class.
        /// </summary>
        public Filter(LogicalFilter logical = default(LogicalFilter), IList<Filter> and = default(IList<Filter>), IList<Filter> or = default(IList<Filter>), BinaryFilter binary = default(BinaryFilter), EqualFilter eq = default(EqualFilter), NotEqualFilter ne = default(NotEqualFilter), GreaterThanFilter gt = default(GreaterThanFilter), GreaterThanOrEqualFilter gte = default(GreaterThanOrEqualFilter), LesserThanFilter lt = default(LesserThanFilter), LesserThanOrEqualFilter lte = default(LesserThanOrEqualFilter), StartsWithFilter startsWith = default(StartsWithFilter), EndsWithFilter endsWith = default(EndsWithFilter), ContainsFilter contains = default(ContainsFilter), RangeFilter between = default(RangeFilter), Filter not = default(Filter))
        {
            Logical = logical;
            And = and;
            Or = or;
            Binary = binary;
            Eq = eq;
            Ne = ne;
            Gt = gt;
            Gte = gte;
            Lt = lt;
            Lte = lte;
            StartsWith = startsWith;
            EndsWith = endsWith;
            Contains = contains;
            Between = between;
            Not = not;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "logical")]
        public LogicalFilter Logical { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "and")]
        public IList<Filter> And { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "or")]
        public IList<Filter> Or { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "binary")]
        public BinaryFilter Binary { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "eq")]
        public EqualFilter Eq { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ne")]
        public NotEqualFilter Ne { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "gt")]
        public GreaterThanFilter Gt { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "gte")]
        public GreaterThanOrEqualFilter Gte { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lt")]
        public LesserThanFilter Lt { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lte")]
        public LesserThanOrEqualFilter Lte { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "startsWith")]
        public StartsWithFilter StartsWith { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "endsWith")]
        public EndsWithFilter EndsWith { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "contains")]
        public ContainsFilter Contains { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "between")]
        public RangeFilter Between { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "not")]
        public Filter Not { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Logical != null)
            {
                Logical.Validate();
            }
            if (And != null)
            {
                foreach (var element in And)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (Or != null)
            {
                foreach (var element1 in Or)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
            if (Binary != null)
            {
                Binary.Validate();
            }
            if (Eq != null)
            {
                Eq.Validate();
            }
            if (Ne != null)
            {
                Ne.Validate();
            }
            if (Gt != null)
            {
                Gt.Validate();
            }
            if (Gte != null)
            {
                Gte.Validate();
            }
            if (Lt != null)
            {
                Lt.Validate();
            }
            if (Lte != null)
            {
                Lte.Validate();
            }
            if (StartsWith != null)
            {
                StartsWith.Validate();
            }
            if (EndsWith != null)
            {
                EndsWith.Validate();
            }
            if (Contains != null)
            {
                Contains.Validate();
            }
            if (Between != null)
            {
                Between.Validate();
            }
            if (Not != null)
            {
                Not.Validate();
            }
        }
    }
}
