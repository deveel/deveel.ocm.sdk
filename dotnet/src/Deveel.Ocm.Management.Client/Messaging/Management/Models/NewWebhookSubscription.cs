// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Deveel.Messaging.Management.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Requests the subscription to the notification of event
    /// occurrences within the system
    /// </summary>
    public partial class NewWebhookSubscription
    {
        /// <summary>
        /// Initializes a new instance of the NewWebhookSubscription class.
        /// </summary>
        public NewWebhookSubscription()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the NewWebhookSubscription class.
        /// </summary>
        /// <param name="destinationUrl">The URL where the webhooks should be
        /// delivered</param>
        /// <param name="events">The type of message event to subscribe</param>
        /// <param name="name">A descriptive custom name of the
        /// subscription</param>
        /// <param name="secret">An optional secret word that is used to sign
        /// the webhooks to secure them</param>
        /// <param name="headers">A set of optional headers that are attached
        /// to the webhook
        /// request (for correlation)</param>
        /// <param name="filters">An optional set of filters that restrict the
        /// events to be notified</param>
        /// <param name="retryCount">The number of attempts to perform when
        /// trying to deliver
        /// the webhook, before failing</param>
        /// <param name="metadata">A list of metadata associated to the
        /// subscription</param>
        public NewWebhookSubscription(string destinationUrl, IList<string> events, string name = default(string), string secret = default(string), IDictionary<string, string> headers = default(IDictionary<string, string>), IList<Filter> filters = default(IList<Filter>), int? retryCount = default(int?), IDictionary<string, object> metadata = default(IDictionary<string, object>))
        {
            Name = name;
            DestinationUrl = destinationUrl;
            Secret = secret;
            Headers = headers;
            Events = events;
            Filters = filters;
            RetryCount = retryCount;
            Metadata = metadata;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets a descriptive custom name of the subscription
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the URL where the webhooks should be delivered
        /// </summary>
        [JsonProperty(PropertyName = "destinationUrl")]
        public string DestinationUrl { get; set; }

        /// <summary>
        /// Gets or sets an optional secret word that is used to sign the
        /// webhooks to secure them
        /// </summary>
        [JsonProperty(PropertyName = "secret")]
        public string Secret { get; set; }

        /// <summary>
        /// Gets or sets a set of optional headers that are attached to the
        /// webhook
        /// request (for correlation)
        /// </summary>
        [JsonProperty(PropertyName = "headers")]
        public IDictionary<string, string> Headers { get; set; }

        /// <summary>
        /// Gets or sets the type of message event to subscribe
        /// </summary>
        [JsonProperty(PropertyName = "events")]
        public IList<string> Events { get; set; }

        /// <summary>
        /// Gets or sets an optional set of filters that restrict the events to
        /// be notified
        /// </summary>
        [JsonProperty(PropertyName = "filters")]
        public IList<Filter> Filters { get; set; }

        /// <summary>
        /// Gets or sets the number of attempts to perform when trying to
        /// deliver
        /// the webhook, before failing
        /// </summary>
        [JsonProperty(PropertyName = "retryCount")]
        public int? RetryCount { get; set; }

        /// <summary>
        /// Gets or sets a list of metadata associated to the subscription
        /// </summary>
        [JsonProperty(PropertyName = "metadata")]
        public IDictionary<string, object> Metadata { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (DestinationUrl == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DestinationUrl");
            }
            if (Events == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Events");
            }
            if (Filters != null)
            {
                foreach (var element in Filters)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
