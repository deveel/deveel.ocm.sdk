// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Deveel.Messaging.Management.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// A provisioned usage quota of a channel capability
    /// </summary>
    public partial class ChannelQuota
    {
        /// <summary>
        /// Initializes a new instance of the ChannelQuota class.
        /// </summary>
        public ChannelQuota()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ChannelQuota class.
        /// </summary>
        /// <param name="metricType">The type of metric provisioned (eg.
        /// "messages.outbound", "messages.fallbacks")</param>
        /// <param name="limit">The provisioned upper limit of the
        /// quota</param>
        /// <param name="period">Possible values include: 'none', 'day',
        /// 'month', 'year'</param>
        public ChannelQuota(string metricType, long limit, ChannelQuotaPeriod? period = default(ChannelQuotaPeriod?))
        {
            MetricType = metricType;
            Period = period;
            Limit = limit;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the type of metric provisioned (eg.
        /// "messages.outbound", "messages.fallbacks")
        /// </summary>
        [JsonProperty(PropertyName = "metricType")]
        public string MetricType { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'none', 'day', 'month',
        /// 'year'
        /// </summary>
        [JsonProperty(PropertyName = "period")]
        public ChannelQuotaPeriod? Period { get; set; }

        /// <summary>
        /// Gets or sets the provisioned upper limit of the quota
        /// </summary>
        [JsonProperty(PropertyName = "limit")]
        public long Limit { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (MetricType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "MetricType");
            }
        }
    }
}
