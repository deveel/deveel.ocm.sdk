// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Deveel.Messaging.Management.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    public partial class FilterValue
    {
        /// <summary>
        /// Initializes a new instance of the FilterValue class.
        /// </summary>
        public FilterValue()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the FilterValue class.
        /// </summary>
        public FilterValue(string stringProperty = default(string), double? number = default(double?), System.DateTimeOffset? date = default(System.DateTimeOffset?), long? integer = default(long?), bool? boolean = default(bool?), GeoPoint point = default(GeoPoint))
        {
            StringProperty = stringProperty;
            Number = number;
            Date = date;
            Integer = integer;
            Boolean = boolean;
            Point = point;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "string")]
        public string StringProperty { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "number")]
        public double? Number { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "date")]
        public System.DateTimeOffset? Date { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "integer")]
        public long? Integer { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "boolean")]
        public bool? Boolean { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "point")]
        public GeoPoint Point { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Point != null)
            {
                Point.Validate();
            }
        }
    }
}
