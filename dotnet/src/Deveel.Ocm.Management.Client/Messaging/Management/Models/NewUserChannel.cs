// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Deveel.Messaging.Management.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class NewUserChannel
    {
        /// <summary>
        /// Initializes a new instance of the NewUserChannel class.
        /// </summary>
        public NewUserChannel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the NewUserChannel class.
        /// </summary>
        /// <param name="name">The name of the channel instance</param>
        /// <param name="type">Possible values include: 'sms', 'messenger',
        /// 'whatsapp', 'email', 'viber', 'rcs', 'push', 'telegram',
        /// 'sandbox'</param>
        /// <param name="provider">Possible values include: 'other', 'twilio',
        /// 'sendgrid', 'sendinblue', 'facebook', 'deveel', 'linkmobility',
        /// 'mailjet', 'telegram'</param>
        /// <param name="directions">Possible values include: 'default', 'out',
        /// 'in', 'duplex'</param>
        /// <param name="quotas">The usage quotas to be enforced within the
        /// channel</param>
        /// <param name="context">A context that is appended to the messages
        /// sent or received
        /// through the channel.</param>
        /// <param name="contentTypes">The list of allowed types of message
        /// content</param>
        /// <param name="credentials">The credentials that will be used to
        /// access the
        /// provider of messaging services</param>
        /// <param name="settings">Channel-specific settings (supported by the
        /// provider)</param>
        /// <param name="terminals">A list of terminals to be bound to the
        /// channel</param>
        public NewUserChannel(string name, ChannelType type, ChannelProvider provider, ChannelDirections directions, IList<ChannelQuota> quotas = default(IList<ChannelQuota>), IDictionary<string, object> context = default(IDictionary<string, object>), IList<MessageContentType?> contentTypes = default(IList<MessageContentType?>), IList<ChannelCredentials> credentials = default(IList<ChannelCredentials>), IDictionary<string, object> settings = default(IDictionary<string, object>), IList<NewChannelTerminal> terminals = default(IList<NewChannelTerminal>))
        {
            Quotas = quotas;
            Context = context;
            Name = name;
            Type = type;
            Provider = provider;
            Directions = directions;
            ContentTypes = contentTypes;
            Credentials = credentials;
            Settings = settings;
            Terminals = terminals;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the usage quotas to be enforced within the channel
        /// </summary>
        [JsonProperty(PropertyName = "quotas")]
        public IList<ChannelQuota> Quotas { get; set; }

        /// <summary>
        /// Gets or sets a context that is appended to the messages sent or
        /// received
        /// through the channel.
        /// </summary>
        [JsonProperty(PropertyName = "context")]
        public IDictionary<string, object> Context { get; set; }

        /// <summary>
        /// Gets or sets the name of the channel instance
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'sms', 'messenger',
        /// 'whatsapp', 'email', 'viber', 'rcs', 'push', 'telegram', 'sandbox'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public ChannelType Type { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'other', 'twilio',
        /// 'sendgrid', 'sendinblue', 'facebook', 'deveel', 'linkmobility',
        /// 'mailjet', 'telegram'
        /// </summary>
        [JsonProperty(PropertyName = "provider")]
        public ChannelProvider Provider { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'default', 'out', 'in',
        /// 'duplex'
        /// </summary>
        [JsonProperty(PropertyName = "directions")]
        public ChannelDirections Directions { get; set; }

        /// <summary>
        /// Gets or sets the list of allowed types of message content
        /// </summary>
        [JsonProperty(PropertyName = "contentTypes")]
        public IList<MessageContentType?> ContentTypes { get; set; }

        /// <summary>
        /// Gets or sets the credentials that will be used to access the
        /// provider of messaging services
        /// </summary>
        [JsonProperty(PropertyName = "credentials")]
        public IList<ChannelCredentials> Credentials { get; set; }

        /// <summary>
        /// Gets or sets channel-specific settings (supported by the provider)
        /// </summary>
        [JsonProperty(PropertyName = "settings")]
        public IDictionary<string, object> Settings { get; set; }

        /// <summary>
        /// Gets or sets a list of terminals to be bound to the channel
        /// </summary>
        [JsonProperty(PropertyName = "terminals")]
        public IList<NewChannelTerminal> Terminals { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Quotas != null)
            {
                foreach (var element in Quotas)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (Credentials != null)
            {
                foreach (var element1 in Credentials)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
        }
    }
}
