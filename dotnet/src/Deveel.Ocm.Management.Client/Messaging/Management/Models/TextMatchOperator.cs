// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Deveel.Messaging.Management.Models
{
    using Newtonsoft.Json;

    /// <summary>
    /// Defines values for TextMatchOperator.
    /// </summary>
    /// <summary>
    /// Determine base value for a given allowed value if exists, else return
    /// the value itself
    /// </summary>
    [JsonConverter(typeof(TextMatchOperatorConverter))]
    public struct TextMatchOperator : System.IEquatable<TextMatchOperator>
    {
        private TextMatchOperator(string underlyingValue)
        {
            UnderlyingValue=underlyingValue;
        }

        public static readonly TextMatchOperator StartsWith = "startsWith";

        public static readonly TextMatchOperator EndsWith = "endsWith";

        public static readonly TextMatchOperator Contains = "contains";

        public static readonly TextMatchOperator NotContains = "notContains";


        /// <summary>
        /// Underlying value of enum TextMatchOperator
        /// </summary>
        private readonly string UnderlyingValue;

        /// <summary>
        /// Returns string representation for TextMatchOperator
        /// </summary>
        public override string ToString()
        {
            return UnderlyingValue == null ? null : UnderlyingValue.ToString();
        }

        /// <summary>
        /// Compares enums of type TextMatchOperator
        /// </summary>
        public bool Equals(TextMatchOperator e)
        {
            return UnderlyingValue.Equals(e.UnderlyingValue);
        }

        /// <summary>
        /// Implicit operator to convert string to TextMatchOperator
        /// </summary>
        public static implicit operator TextMatchOperator(string value)
        {
            return new TextMatchOperator(value);
        }

        /// <summary>
        /// Implicit operator to convert TextMatchOperator to string
        /// </summary>
        public static implicit operator string(TextMatchOperator e)
        {
            return e.UnderlyingValue;
        }

        /// <summary>
        /// Overriding == operator for enum TextMatchOperator
        /// </summary>
        public static bool operator == (TextMatchOperator e1, TextMatchOperator e2)
        {
            return e2.Equals(e1);
        }

        /// <summary>
        /// Overriding != operator for enum TextMatchOperator
        /// </summary>
        public static bool operator != (TextMatchOperator e1, TextMatchOperator e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>
        /// Overrides Equals operator for TextMatchOperator
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is TextMatchOperator && Equals((TextMatchOperator)obj);
        }

        /// <summary>
        /// Returns for hashCode TextMatchOperator
        /// </summary>
        public override int GetHashCode()
        {
            return UnderlyingValue.GetHashCode();
        }

    }
}
