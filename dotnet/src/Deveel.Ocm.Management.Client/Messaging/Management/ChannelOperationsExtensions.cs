// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Deveel.Messaging.Management
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ChannelOperations.
    /// </summary>
    public static partial class ChannelOperationsExtensions
    {
            /// <summary>
            /// Gets a Channel Assignment Request
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object GetRequest(this IChannelOperations operations, string id)
            {
                return operations.GetRequestAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a Channel Assignment Request
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetRequestAsync(this IChannelOperations operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRequestWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a Channel Assignment Request
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<object> GetRequestWithHttpMessages(this IChannelOperations operations, string id, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.GetRequestWithHttpMessagesAsync(id, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all Channel Assignment Requests
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetRequests(this IChannelOperations operations)
            {
                return operations.GetRequestsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all Channel Assignment Requests
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetRequestsAsync(this IChannelOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRequestsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all Channel Assignment Requests
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<object> GetRequestsWithHttpMessages(this IChannelOperations operations, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.GetRequestsWithHttpMessagesAsync(customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requests the Assignment of a Channel
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static object Request(this IChannelOperations operations, NewChannelAssignmentRequest body)
            {
                return operations.RequestAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requests the Assignment of a Channel
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> RequestAsync(this IChannelOperations operations, NewChannelAssignmentRequest body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RequestWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Requests the Assignment of a Channel
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<object> RequestWithHttpMessages(this IChannelOperations operations, NewChannelAssignmentRequest body, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.RequestWithHttpMessagesAsync(body, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all the Channel Schemata
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='provider'>
            /// </param>
            public static object GetAllSchema(this IChannelOperations operations, string provider = default(string))
            {
                return operations.GetAllSchemaAsync(provider).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all the Channel Schemata
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='provider'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAllSchemaAsync(this IChannelOperations operations, string provider = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllSchemaWithHttpMessagesAsync(provider, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all the Channel Schemata
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='provider'>
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<object> GetAllSchemaWithHttpMessages(this IChannelOperations operations, string provider = default(string), Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.GetAllSchemaWithHttpMessagesAsync(provider, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a Channel Schema
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='type'>
            /// Possible values include: 'sms', 'messenger', 'whatsapp', 'email', 'viber',
            /// 'rcs', 'push', 'telegram', 'sandbox'
            /// </param>
            /// <param name='provider'>
            /// </param>
            public static object GetSchema(this IChannelOperations operations, ChannelType type, string provider)
            {
                return operations.GetSchemaAsync(type, provider).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a Channel Schema
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='type'>
            /// Possible values include: 'sms', 'messenger', 'whatsapp', 'email', 'viber',
            /// 'rcs', 'push', 'telegram', 'sandbox'
            /// </param>
            /// <param name='provider'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetSchemaAsync(this IChannelOperations operations, ChannelType type, string provider, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSchemaWithHttpMessagesAsync(type, provider, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a Channel Schema
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='type'>
            /// Possible values include: 'sms', 'messenger', 'whatsapp', 'email', 'viber',
            /// 'rcs', 'push', 'telegram', 'sandbox'
            /// </param>
            /// <param name='provider'>
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<object> GetSchemaWithHttpMessages(this IChannelOperations operations, ChannelType type, string provider, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.GetSchemaWithHttpMessagesAsync(type, provider, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new Channel
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static object Create(this IChannelOperations operations, NewUserChannel body)
            {
                return operations.CreateAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new Channel
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateAsync(this IChannelOperations operations, NewUserChannel body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new Channel
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<object> CreateWithHttpMessages(this IChannelOperations operations, NewUserChannel body, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.CreateWithHttpMessagesAsync(body, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all Channels
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='includeNotActive'>
            /// </param>
            public static object ListAll(this IChannelOperations operations, bool? includeNotActive = true)
            {
                return operations.ListAllAsync(includeNotActive).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all Channels
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='includeNotActive'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ListAllAsync(this IChannelOperations operations, bool? includeNotActive = true, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAllWithHttpMessagesAsync(includeNotActive, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all Channels
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='includeNotActive'>
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<object> ListAllWithHttpMessages(this IChannelOperations operations, bool? includeNotActive = true, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.ListAllWithHttpMessagesAsync(includeNotActive, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a Channel
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='channelId'>
            /// </param>
            public static object Get(this IChannelOperations operations, string channelId)
            {
                return operations.GetAsync(channelId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a Channel
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='channelId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAsync(this IChannelOperations operations, string channelId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(channelId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a Channel
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='channelId'>
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<object> GetWithHttpMessages(this IChannelOperations operations, string channelId, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.GetWithHttpMessagesAsync(channelId, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a Channel by Name
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='channelName'>
            /// </param>
            public static object GetByName(this IChannelOperations operations, string channelName)
            {
                return operations.GetByNameAsync(channelName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a Channel by Name
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='channelName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetByNameAsync(this IChannelOperations operations, string channelName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByNameWithHttpMessagesAsync(channelName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a Channel by Name
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='channelName'>
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<object> GetByNameWithHttpMessages(this IChannelOperations operations, string channelName, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.GetByNameWithHttpMessagesAsync(channelName, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a page of Channels
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// </param>
            /// <param name='size'>
            /// </param>
            /// <param name='type'>
            /// </param>
            /// <param name='sort'>
            /// </param>
            public static object GetPage(this IChannelOperations operations, int? number = 1, int? size = 10, string type = default(string), string sort = default(string))
            {
                return operations.GetPageAsync(number, size, type, sort).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a page of Channels
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// </param>
            /// <param name='size'>
            /// </param>
            /// <param name='type'>
            /// </param>
            /// <param name='sort'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetPageAsync(this IChannelOperations operations, int? number = 1, int? size = 10, string type = default(string), string sort = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPageWithHttpMessagesAsync(number, size, type, sort, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a page of Channels
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// </param>
            /// <param name='size'>
            /// </param>
            /// <param name='type'>
            /// </param>
            /// <param name='sort'>
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<object> GetPageWithHttpMessages(this IChannelOperations operations, int? number = 1, int? size = 10, string type = default(string), string sort = default(string), Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.GetPageWithHttpMessagesAsync(number, size, type, sort, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the Channel Credentials
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='channelId'>
            /// </param>
            public static object UpdateCredentials(this IChannelOperations operations, IList<ChannelCredentials> body, string channelId)
            {
                return operations.UpdateCredentialsAsync(body, channelId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the Channel Credentials
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='channelId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateCredentialsAsync(this IChannelOperations operations, IList<ChannelCredentials> body, string channelId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateCredentialsWithHttpMessagesAsync(body, channelId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the Channel Credentials
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='channelId'>
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<object> UpdateCredentialsWithHttpMessages(this IChannelOperations operations, IList<ChannelCredentials> body, string channelId, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.UpdateCredentialsWithHttpMessagesAsync(body, channelId, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Checks if a Channel Exists
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='channelName'>
            /// </param>
            public static object Exists(this IChannelOperations operations, string channelName)
            {
                return operations.ExistsAsync(channelName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Checks if a Channel Exists
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='channelName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ExistsAsync(this IChannelOperations operations, string channelName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ExistsWithHttpMessagesAsync(channelName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Checks if a Channel Exists
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='channelName'>
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<object> ExistsWithHttpMessages(this IChannelOperations operations, string channelName, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.ExistsWithHttpMessagesAsync(channelName, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a Channel from the Inventory
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='channelId'>
            /// </param>
            public static object GetInventoryItem(this IChannelOperations operations, string channelId)
            {
                return operations.GetInventoryItemAsync(channelId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a Channel from the Inventory
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='channelId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetInventoryItemAsync(this IChannelOperations operations, string channelId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetInventoryItemWithHttpMessagesAsync(channelId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a Channel from the Inventory
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='channelId'>
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<object> GetInventoryItemWithHttpMessages(this IChannelOperations operations, string channelId, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.GetInventoryItemWithHttpMessagesAsync(channelId, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a Page of Channels from the Inventory
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// </param>
            /// <param name='size'>
            /// </param>
            public static object GetInventoryPage(this IChannelOperations operations, int? number = 1, int? size = 10)
            {
                return operations.GetInventoryPageAsync(number, size).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a Page of Channels from the Inventory
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// </param>
            /// <param name='size'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetInventoryPageAsync(this IChannelOperations operations, int? number = 1, int? size = 10, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetInventoryPageWithHttpMessagesAsync(number, size, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a Page of Channels from the Inventory
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='number'>
            /// </param>
            /// <param name='size'>
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<object> GetInventoryPageWithHttpMessages(this IChannelOperations operations, int? number = 1, int? size = 10, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.GetInventoryPageWithHttpMessagesAsync(number, size, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

    }
}
