// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Deveel.Messaging.Terminals.Management.Models
{
    /// <summary> The TerminalRoles. </summary>
    public readonly partial struct TerminalRoles : IEquatable<TerminalRoles>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="TerminalRoles"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public TerminalRoles(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string DefaultValue = "default";
        private const string SenderValue = "sender";
        private const string ReceiverValue = "receiver";
        private const string BothValue = "both";

        /// <summary> default. </summary>
        public static TerminalRoles Default { get; } = new TerminalRoles(DefaultValue);
        /// <summary> sender. </summary>
        public static TerminalRoles Sender { get; } = new TerminalRoles(SenderValue);
        /// <summary> receiver. </summary>
        public static TerminalRoles Receiver { get; } = new TerminalRoles(ReceiverValue);
        /// <summary> both. </summary>
        public static TerminalRoles Both { get; } = new TerminalRoles(BothValue);
        /// <summary> Determines if two <see cref="TerminalRoles"/> values are the same. </summary>
        public static bool operator ==(TerminalRoles left, TerminalRoles right) => left.Equals(right);
        /// <summary> Determines if two <see cref="TerminalRoles"/> values are not the same. </summary>
        public static bool operator !=(TerminalRoles left, TerminalRoles right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="TerminalRoles"/>. </summary>
        public static implicit operator TerminalRoles(string value) => new TerminalRoles(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is TerminalRoles other && Equals(other);
        /// <inheritdoc />
        public bool Equals(TerminalRoles other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
