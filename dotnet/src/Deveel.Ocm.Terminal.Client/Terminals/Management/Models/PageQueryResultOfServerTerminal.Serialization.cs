// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Deveel.Messaging.Terminals.Management.Models
{
    public partial class PageQueryResultOfServerTerminal
    {
        internal static PageQueryResultOfServerTerminal DeserializePageQueryResultOfServerTerminal(JsonElement element)
        {
            PageQuery query = default;
            Optional<Uri> self = default;
            Optional<Uri> first = default;
            Optional<Uri> next = default;
            Optional<Uri> previous = default;
            Optional<Uri> last = default;
            int totalItems = default;
            Optional<IReadOnlyList<ServerTerminal>> items = default;
            int totalPages = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("query"))
                {
                    query = PageQuery.DeserializePageQuery(property.Value);
                    continue;
                }
                if (property.NameEquals("self"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        self = null;
                        continue;
                    }
                    self = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("first"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        first = null;
                        continue;
                    }
                    first = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("next"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        next = null;
                        continue;
                    }
                    next = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("previous"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        previous = null;
                        continue;
                    }
                    previous = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("last"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        last = null;
                        continue;
                    }
                    last = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("totalItems"))
                {
                    totalItems = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("items"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        items = null;
                        continue;
                    }
                    List<ServerTerminal> array = new List<ServerTerminal>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ServerTerminal.DeserializeServerTerminal(item));
                    }
                    items = array;
                    continue;
                }
                if (property.NameEquals("totalPages"))
                {
                    totalPages = property.Value.GetInt32();
                    continue;
                }
            }
            return new PageQueryResultOfServerTerminal(query, self.Value, first.Value, next.Value, previous.Value, last.Value, totalItems, Optional.ToList(items), totalPages);
        }
    }
}
