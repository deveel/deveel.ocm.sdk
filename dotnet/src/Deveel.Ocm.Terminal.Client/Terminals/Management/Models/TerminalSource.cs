// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Deveel.Messaging.Terminals.Management.Models
{
    /// <summary> The TerminalSource. </summary>
    public readonly partial struct TerminalSource : IEquatable<TerminalSource>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="TerminalSource"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public TerminalSource(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UnknownValue = "unknown";
        private const string InventoryValue = "inventory";
        private const string CustomerValue = "customer";

        /// <summary> unknown. </summary>
        public static TerminalSource Unknown { get; } = new TerminalSource(UnknownValue);
        /// <summary> inventory. </summary>
        public static TerminalSource Inventory { get; } = new TerminalSource(InventoryValue);
        /// <summary> customer. </summary>
        public static TerminalSource Customer { get; } = new TerminalSource(CustomerValue);
        /// <summary> Determines if two <see cref="TerminalSource"/> values are the same. </summary>
        public static bool operator ==(TerminalSource left, TerminalSource right) => left.Equals(right);
        /// <summary> Determines if two <see cref="TerminalSource"/> values are not the same. </summary>
        public static bool operator !=(TerminalSource left, TerminalSource right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="TerminalSource"/>. </summary>
        public static implicit operator TerminalSource(string value) => new TerminalSource(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is TerminalSource other && Equals(other);
        /// <inheritdoc />
        public bool Equals(TerminalSource other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
