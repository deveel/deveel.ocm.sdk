// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Deveel.Messaging.Terminals.Management.Models
{
    /// <summary> Model factory for read-only models. </summary>
    public static partial class TerminalModelFactory
    {
        /// <summary> Initializes a new instance of ServerTerminal. </summary>
        /// <param name="type"></param>
        /// <param name="address"></param>
        /// <param name="status"></param>
        /// <param name="lastChanged"></param>
        /// <param name="source"></param>
        /// <param name="role"></param>
        /// <param name="sourceId"></param>
        /// <param name="settings"> Dictionary of &lt;any&gt;. </param>
        /// <param name="context"> Dictionary of &lt;any&gt;. </param>
        /// <param name="provider"></param>
        /// <param name="id"></param>
        /// <returns> A new <see cref="Models.ServerTerminal"/> instance for mocking. </returns>
        public static ServerTerminal ServerTerminal(ServerTerminalType type = default, string address = null, TerminalStatus status = default, DateTimeOffset? lastChanged = null, TerminalSource source = default, TerminalRoles role = default, string sourceId = null, IReadOnlyDictionary<string, object> settings = null, IReadOnlyDictionary<string, object> context = null, string provider = null, string id = null)
        {
            settings ??= new Dictionary<string, object>();
            context ??= new Dictionary<string, object>();

            return new ServerTerminal(type, address, status, lastChanged, source, role, sourceId, settings, context, provider, id);
        }

        /// <summary> Initializes a new instance of PageQueryResultOfServerTerminal. </summary>
        /// <param name="totalItems"></param>
        /// <param name="items"></param>
        /// <param name="totalPages"></param>
        /// <param name="query"></param>
        /// <param name="self"></param>
        /// <param name="first"></param>
        /// <param name="next"></param>
        /// <param name="previous"></param>
        /// <param name="last"></param>
        /// <returns> A new <see cref="Models.PageQueryResultOfServerTerminal"/> instance for mocking. </returns>
        public static PageQueryResultOfServerTerminal PageQueryResultOfServerTerminal(int totalItems = default, IEnumerable<ServerTerminal> items = null, int totalPages = default, PageQuery query = null, Uri self = null, Uri first = null, Uri next = null, Uri previous = null, Uri last = null)
        {
            items ??= new List<ServerTerminal>();

            return new PageQueryResultOfServerTerminal(totalItems, items?.ToList(), totalPages, query, self, first, next, previous, last);
        }

        /// <summary> Initializes a new instance of PageQuery. </summary>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sortBy"></param>
        /// <returns> A new <see cref="Models.PageQuery"/> instance for mocking. </returns>
        public static PageQuery PageQuery(int? page = null, int? size = null, IEnumerable<string> sortBy = null)
        {
            sortBy ??= new List<string>();

            return new PageQuery(page, size, sortBy?.ToList());
        }

        /// <summary> Initializes a new instance of TerminalAssignmentRequest. </summary>
        /// <param name="terminal"></param>
        /// <param name="requester"></param>
        /// <param name="timeStamp"></param>
        /// <param name="response"></param>
        /// <param name="id"></param>
        /// <param name="assignment"></param>
        /// <returns> A new <see cref="Models.TerminalAssignmentRequest"/> instance for mocking. </returns>
        public static TerminalAssignmentRequest TerminalAssignmentRequest(RequestedTerminal terminal = null, string requester = null, DateTimeOffset timeStamp = default, TerminalAssignmentResponse response = null, string id = null, TerminalAssignment assignment = null)
        {
            return new TerminalAssignmentRequest(terminal, requester, timeStamp, response, id, assignment);
        }

        /// <summary> Initializes a new instance of RequestedTerminal. </summary>
        /// <param name="terminalId"></param>
        /// <param name="type"></param>
        /// <param name="address"></param>
        /// <returns> A new <see cref="Models.RequestedTerminal"/> instance for mocking. </returns>
        public static RequestedTerminal RequestedTerminal(string terminalId = null, ServerTerminalType? type = null, string address = null)
        {
            return new RequestedTerminal(terminalId, type, address);
        }

        /// <summary> Initializes a new instance of TerminalAssignmentResponse. </summary>
        /// <param name="responder"></param>
        /// <param name="responseType"></param>
        /// <param name="timeStamp"></param>
        /// <param name="notes"></param>
        /// <returns> A new <see cref="Models.TerminalAssignmentResponse"/> instance for mocking. </returns>
        public static TerminalAssignmentResponse TerminalAssignmentResponse(string responder = null, ResourceAssignmentResponseType responseType = default, DateTimeOffset timeStamp = default, string notes = null)
        {
            return new TerminalAssignmentResponse(responder, responseType, timeStamp, notes);
        }

        /// <summary> Initializes a new instance of TerminalAssignment. </summary>
        /// <param name="tenantId"></param>
        /// <param name="timeStamp"></param>
        /// <param name="terminalId"></param>
        /// <returns> A new <see cref="Models.TerminalAssignment"/> instance for mocking. </returns>
        public static TerminalAssignment TerminalAssignment(string tenantId = null, DateTimeOffset timeStamp = default, string terminalId = null)
        {
            return new TerminalAssignment(tenantId, timeStamp, terminalId);
        }

        /// <summary> Initializes a new instance of TerminalProvider. </summary>
        /// <param name="name"></param>
        /// <param name="code"></param>
        /// <param name="terminalTypes"></param>
        /// <returns> A new <see cref="Models.TerminalProvider"/> instance for mocking. </returns>
        public static TerminalProvider TerminalProvider(string name = null, string code = null, IEnumerable<ServerTerminalType> terminalTypes = null)
        {
            terminalTypes ??= new List<ServerTerminalType>();

            return new TerminalProvider(name, code, terminalTypes?.ToList());
        }

        /// <summary> Initializes a new instance of PageQueryResultOfTerminalAssignmentRequest. </summary>
        /// <param name="totalItems"></param>
        /// <param name="items"></param>
        /// <param name="totalPages"></param>
        /// <param name="query"></param>
        /// <param name="self"></param>
        /// <param name="first"></param>
        /// <param name="next"></param>
        /// <param name="previous"></param>
        /// <param name="last"></param>
        /// <returns> A new <see cref="Models.PageQueryResultOfTerminalAssignmentRequest"/> instance for mocking. </returns>
        public static PageQueryResultOfTerminalAssignmentRequest PageQueryResultOfTerminalAssignmentRequest(int totalItems = default, IEnumerable<TerminalAssignmentRequest> items = null, int totalPages = default, PageQuery query = null, Uri self = null, Uri first = null, Uri next = null, Uri previous = null, Uri last = null)
        {
            items ??= new List<TerminalAssignmentRequest>();

            return new PageQueryResultOfTerminalAssignmentRequest(totalItems, items?.ToList(), totalPages, query, self, first, next, previous, last);
        }
    }
}
