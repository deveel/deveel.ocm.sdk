// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Deveel.Messaging.Terminals.Management.Models;

namespace Deveel.Messaging.Terminals.Management
{
    /// <summary> The Terminal service client. </summary>
    public partial class TerminalClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal TerminalRestClient RestClient { get; }

        /// <summary> Initializes a new instance of TerminalClient for mocking. </summary>
        protected TerminalClient()
        {
        }

        /// <summary> Initializes a new instance of TerminalClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public TerminalClient(AzureKeyCredential credential, Uri endpoint = null, TerminalClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            endpoint ??= new Uri("https://api.ocm.deveel.net");

            options ??= new TerminalClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            _pipeline = HttpPipelineBuilder.Build(options, new AzureKeyCredentialPolicy(credential, "X-API-KEY"));
            RestClient = new TerminalRestClient(_clientDiagnostics, _pipeline, endpoint);
        }

        /// <summary> Initializes a new instance of TerminalClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public TerminalClient(TokenCredential credential, Uri endpoint = null, TerminalClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            endpoint ??= new Uri("https://api.ocm.deveel.net");

            options ??= new TerminalClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            string[] scopes = { "read:inventory", "write:inventory", "read:tenant", "write:tenant", "create:terminal", "read:terminal", "delete:terminal", "update:terminal", "request:terminal", "read:terminal_requests", "assign:terminal" };
            _pipeline = HttpPipelineBuilder.Build(options, new BearerTokenAuthenticationPolicy(credential, scopes));
            RestClient = new TerminalRestClient(_clientDiagnostics, _pipeline, endpoint);
        }

        /// <summary> Initializes a new instance of TerminalClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="clientDiagnostics"/> or <paramref name="pipeline"/> is null. </exception>
        internal TerminalClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null)
        {
            RestClient = new TerminalRestClient(clientDiagnostics, pipeline, endpoint);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Creates a Terminal. </summary>
        /// <param name="body"> The NewServerTerminal to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ServerTerminal>> CreateTerminalAsync(NewServerTerminal body = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("TerminalClient.CreateTerminal");
            scope.Start();
            try
            {
                return await RestClient.CreateTerminalAsync(body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates a Terminal. </summary>
        /// <param name="body"> The NewServerTerminal to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ServerTerminal> CreateTerminal(NewServerTerminal body = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("TerminalClient.CreateTerminal");
            scope.Start();
            try
            {
                return RestClient.CreateTerminal(body, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a Terminal. </summary>
        /// <param name="id"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ServerTerminal>> GetTerminalAsync(string id, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("TerminalClient.GetTerminal");
            scope.Start();
            try
            {
                return await RestClient.GetTerminalAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a Terminal. </summary>
        /// <param name="id"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ServerTerminal> GetTerminal(string id, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("TerminalClient.GetTerminal");
            scope.Start();
            try
            {
                return RestClient.GetTerminal(id, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a Tenant&apos;s Terminal. </summary>
        /// <param name="id"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> RemoveTerminalAsync(string id, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("TerminalClient.RemoveTerminal");
            scope.Start();
            try
            {
                return await RestClient.RemoveTerminalAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a Tenant&apos;s Terminal. </summary>
        /// <param name="id"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response RemoveTerminal(string id, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("TerminalClient.RemoveTerminal");
            scope.Start();
            try
            {
                return RestClient.RemoveTerminal(id, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a page of Terminals. </summary>
        /// <param name="type"> The String to use. </param>
        /// <param name="p"> The Int32 to use. </param>
        /// <param name="c"> The Int32 to use. </param>
        /// <param name="s"> The ArrayOfGet3ItemsItem to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<PageQueryResultOfServerTerminal>> GetTerminalPageAsync(string type = null, int? p = null, int? c = null, IEnumerable<string> s = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("TerminalClient.GetTerminalPage");
            scope.Start();
            try
            {
                return await RestClient.GetTerminalPageAsync(type, p, c, s, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a page of Terminals. </summary>
        /// <param name="type"> The String to use. </param>
        /// <param name="p"> The Int32 to use. </param>
        /// <param name="c"> The Int32 to use. </param>
        /// <param name="s"> The ArrayOfGet3ItemsItem to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<PageQueryResultOfServerTerminal> GetTerminalPage(string type = null, int? p = null, int? c = null, IEnumerable<string> s = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("TerminalClient.GetTerminalPage");
            scope.Start();
            try
            {
                return RestClient.GetTerminalPage(type, p, c, s, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Looks up a Terminal. </summary>
        /// <param name="body"> The TerminalLookup to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ServerTerminal>> LookupTerminalAsync(TerminalLookup body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("TerminalClient.LookupTerminal");
            scope.Start();
            try
            {
                return await RestClient.LookupTerminalAsync(body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Looks up a Terminal. </summary>
        /// <param name="body"> The TerminalLookup to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ServerTerminal> LookupTerminal(TerminalLookup body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("TerminalClient.LookupTerminal");
            scope.Start();
            try
            {
                return RestClient.LookupTerminal(body, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Changes the Status of a Terminal. </summary>
        /// <param name="id"> The String to use. </param>
        /// <param name="body"> The NewTerminalState to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ServerTerminal>> ChangeTerminalStatusAsync(string id, NewTerminalState body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("TerminalClient.ChangeTerminalStatus");
            scope.Start();
            try
            {
                return await RestClient.ChangeTerminalStatusAsync(id, body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Changes the Status of a Terminal. </summary>
        /// <param name="id"> The String to use. </param>
        /// <param name="body"> The NewTerminalState to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ServerTerminal> ChangeTerminalStatus(string id, NewTerminalState body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("TerminalClient.ChangeTerminalStatus");
            scope.Start();
            try
            {
                return RestClient.ChangeTerminalStatus(id, body, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Changes the Role of a Terminal. </summary>
        /// <param name="id"> The String to use. </param>
        /// <param name="body"> The NewTerminalRole to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ServerTerminal>> ChangeTerminalRoleAsync(string id, NewTerminalRole body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("TerminalClient.ChangeTerminalRole");
            scope.Start();
            try
            {
                return await RestClient.ChangeTerminalRoleAsync(id, body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Changes the Role of a Terminal. </summary>
        /// <param name="id"> The String to use. </param>
        /// <param name="body"> The NewTerminalRole to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ServerTerminal> ChangeTerminalRole(string id, NewTerminalRole body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("TerminalClient.ChangeTerminalRole");
            scope.Start();
            try
            {
                return RestClient.ChangeTerminalRole(id, body, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Requests a Terminal. </summary>
        /// <param name="body"> The NewTerminalAssignmentRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<TerminalAssignmentRequest>> RequestTerminalAsync(NewTerminalAssignmentRequest body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("TerminalClient.RequestTerminal");
            scope.Start();
            try
            {
                return await RestClient.RequestTerminalAsync(body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Requests a Terminal. </summary>
        /// <param name="body"> The NewTerminalAssignmentRequest to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<TerminalAssignmentRequest> RequestTerminal(NewTerminalAssignmentRequest body, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("TerminalClient.RequestTerminal");
            scope.Start();
            try
            {
                return RestClient.RequestTerminal(body, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List All Supported Providers. </summary>
        /// <param name="type"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<IReadOnlyList<TerminalProvider>>> ListProvidersAsync(string type = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("TerminalClient.ListProviders");
            scope.Start();
            try
            {
                return await RestClient.ListProvidersAsync(type, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List All Supported Providers. </summary>
        /// <param name="type"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<IReadOnlyList<TerminalProvider>> ListProviders(string type = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("TerminalClient.ListProviders");
            scope.Start();
            try
            {
                return RestClient.ListProviders(type, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a Provider by its Code. </summary>
        /// <param name="code"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<TerminalProvider>> GetProviderAsync(string code, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("TerminalClient.GetProvider");
            scope.Start();
            try
            {
                return await RestClient.GetProviderAsync(code, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a Provider by its Code. </summary>
        /// <param name="code"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<TerminalProvider> GetProvider(string code, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("TerminalClient.GetProvider");
            scope.Start();
            try
            {
                return RestClient.GetProvider(code, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a Terminal Assignment Request. </summary>
        /// <param name="id"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<TerminalAssignmentRequest>> GetTerminalRequestAsync(string id, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("TerminalClient.GetTerminalRequest");
            scope.Start();
            try
            {
                return await RestClient.GetTerminalRequestAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a Terminal Assignment Request. </summary>
        /// <param name="id"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<TerminalAssignmentRequest> GetTerminalRequest(string id, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("TerminalClient.GetTerminalRequest");
            scope.Start();
            try
            {
                return RestClient.GetTerminalRequest(id, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a page of Terminal Assignment Requests. </summary>
        /// <param name="type"> The String to use. </param>
        /// <param name="p"> The Int32 to use. </param>
        /// <param name="c"> The Int32 to use. </param>
        /// <param name="s"> The ArrayOfString to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<PageQueryResultOfTerminalAssignmentRequest>> GetTerminalRequestsAsync(string type = null, int? p = null, int? c = null, IEnumerable<string> s = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("TerminalClient.GetTerminalRequests");
            scope.Start();
            try
            {
                return await RestClient.GetTerminalRequestsAsync(type, p, c, s, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a page of Terminal Assignment Requests. </summary>
        /// <param name="type"> The String to use. </param>
        /// <param name="p"> The Int32 to use. </param>
        /// <param name="c"> The Int32 to use. </param>
        /// <param name="s"> The ArrayOfString to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<PageQueryResultOfTerminalAssignmentRequest> GetTerminalRequests(string type = null, int? p = null, int? c = null, IEnumerable<string> s = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("TerminalClient.GetTerminalRequests");
            scope.Start();
            try
            {
                return RestClient.GetTerminalRequests(type, p, c, s, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
